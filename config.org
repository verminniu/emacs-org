
#+Title:  Vermin's Emacs Configuration

* Table of Contents                                                :TOC_2_gh:
- [[#install][Install]]
  - [[#linux-install-from-sources][linux Install From Sources]]
  - [[#mac-版本][Mac 版本]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#proxy][Proxy]]
  - [[#packages-sources][Packages Sources]]
  - [[#use-package][use-package]]
  - [[#quelpa][Quelpa]]
  - [[#elpaca][elpaca]]
- [[#start-up][Start Up]]
  - [[#better-defaults][Better defaults]]
  - [[#os-set][Os Set]]
  - [[#customization][Customization]]
  - [[#fonts][Fonts]]
  - [[#key-binding][Key Binding]]
  - [[#hydra][Hydra]]
  - [[#shell-path][Shell Path]]
  - [[#theme][Theme]]
  - [[#mode-line][mode-line]]
  - [[#company][Company]]
  - [[#turn-off-mouse-interface][Turn off mouse interface]]
  - [[#projectile][Projectile]]
  - [[#kkp][kkp]]
  - [[#rime][Rime]]
  - [[#ultra-scroll---for-mac][ultra-scroll - for mac]]
- [[#languages][Languages]]
  - [[#flycheck][FlyCheck]]
  - [[#citre][Citre]]
  - [[#tree-sitter][Tree-sitter]]
  - [[#eglot][Eglot]]
  - [[#lsp][LSP]]
  - [[#gdb][GDB]]
  - [[#realgud][RealGud]]
  - [[#format-all][Format All]]
  - [[#shell][Shell]]
  - [[#common-lisp----slime][Common Lisp -- slime]]
  - [[#common-lisp----sly][Common Lisp -- sly]]
  - [[#rainbow-identifiers][Rainbow Identifiers]]
  - [[#doxygen-comment][Doxygen Comment]]
  - [[#cmake][CMake]]
  - [[#yaml][Yaml]]
  - [[#emacs-lisp][Emacs Lisp]]
  - [[#lua][Lua]]
  - [[#python][Python]]
  - [[#c][C++]]
  - [[#java][Java]]
  - [[#groovy][Groovy]]
  - [[#markdown][Markdown]]
  - [[#go][GO]]
  - [[#protobuf][Protobuf]]
  - [[#k8s][k8s]]
  - [[#dockerfile][dockerfile]]
  - [[#json][Json]]
  - [[#javascripttypescript][JavaScript/TypeScript]]
- [[#advanced-configuration][Advanced Configuration]]
  - [[#visual-regexp][visual-regexp]]
  - [[#goggles][goggles]]
  - [[#read-only][Read only]]
  - [[#parrot][parrot]]
  - [[#nyan-mode][nyan-mode]]
  - [[#saveplace][Saveplace]]
  - [[#bing-dict][Bing-dict]]
  - [[#helpful][Helpful]]
  - [[#undo-tree][Undo tree]]
  - [[#move-dup][Move-dup]]
  - [[#multiple-cursors][Multiple-cursors]]
  - [[#easy-kill--easy-mark][Easy Kill && easy mark]]
  - [[#beacon][Beacon]]
  - [[#hungry-delete][Hungry delete]]
  - [[#highlight-indent][Highlight Indent]]
  - [[#icons][Icons]]
  - [[#dashboard][Dashboard]]
  - [[#dired][Dired]]
  - [[#dirvish][dirvish]]
  - [[#buffers][Buffers]]
  - [[#history][History]]
  - [[#which-key][Which-Key]]
  - [[#wgrep][wgrep]]
  - [[#ivy][Ivy]]
  - [[#corfu][Corfu]]
  - [[#avy][Avy]]
  - [[#avyzap][avyZap]]
  - [[#parentheses][Parentheses]]
  - [[#recent-files][Recent Files]]
  - [[#version-control][Version Control]]
  - [[#whitespaces][Whitespaces]]
  - [[#word-wrap][Word Wrap]]
  - [[#yasnippet][YASnippet]]
  - [[#number-window][Number Window]]
  - [[#current-word-highlight][Current word highlight]]
  - [[#syntax-subword][Syntax subword]]
  - [[#whole-line-or-region][Whole line or region]]
  - [[#ediff][Ediff]]
  - [[#difft][Difft]]
  - [[#symbol-overlay][Symbol overlay]]
  - [[#smex][Smex]]
  - [[#compile][Compile]]
  - [[#refactor][Refactor]]
  - [[#add-multi-iedit][Add multi iedit]]
  - [[#comment-dwim-2][Comment dwim 2]]
  - [[#treemacs][Treemacs]]
- [[#org-mode][Org-mode]]
  - [[#org-common-setting][Org Common Setting]]
  - [[#org-reverse-datetree][org-reverse-datetree]]
  - [[#org-bullets][Org bullets]]
  - [[#org-babel][Org babel]]
  - [[#org-ql][Org QL]]
  - [[#org-sidebar][Org sidebar]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-modern][Org modern]]
  - [[#org-tag-beautify][Org tag beautify]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#org-appear][Org appear]]
  - [[#org-valign][Org Valign]]
  - [[#calfw][Calfw]]
  - [[#org-timeline][Org Timeline]]
  - [[#pomodoro][Pomodoro]]
  - [[#toc-org][Toc-org]]
  - [[#org-hugo][Org hugo]]
  - [[#add-gfm-markdown-to-export-list][add gfm markdown to Export list]]
  - [[#org-mind-map][Org-mind-map]]
  - [[#org-roam][Org-roam]]
  - [[#pandoc][Pandoc]]
  - [[#org-pdf][Org-pdf]]
  - [[#org-download][Org download]]

* Install
** linux Install From Sources
编译参数
--with-nativecomp需要单独分支支持
#+begin_src shell
  ./configure --with-nativecomp --with-gnutls --without-x --with-pop --with-mailutils --with-xml2 --with-json=ifavailable
#+end_src

** Mac 版本
emacs-plus更好一点
https://github.com/d12frosted/homebrew-emacs-plus
+https://github.com/jimeh/emacs-builds+
* Emacs Initialization
** Proxy
复用系统代理
#+begin_src emacs-lisp :tangle no
  (setq url-gateway-method 'socks)
  ;; use wallless
  (setq socks-server '("Default server" "127.0.0.1" 7890 5))
#+end_src
** Packages Sources

In order to install packages, it is useful to configure the package sources.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; package -- vermin's emacs conf
  ;;; Code:

  (setq package-archives '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
                           ("nongnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")))

  ;; (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
  ;;                          ("melpa" . "http://elpa.emacs-china.org/melpa/")
  ;;                          ))

  ;; (setq package-archives '(("gnu"   . "http://mirrors.cloud.tencent.com/elpa/gnu/")
  ;;                          ("melpa" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
  ;;                          ("marmalade" . "http://mirrors.cloud.tencent.com/elpa/marmalade/")
  ;;                          ("melpa-stable" . "http://mirrors.cloud.tencent.com/elpa/melpa-stable/")
  ;; ))
#+END_SRC

** use-package
30已经为默认

#+BEGIN_SRC emacs-lisp :tangle no
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package system-packages
    :ensure t)

  (use-package delight :ensure t)
#+END_SRC

** Quelpa
use Quelpa for use github packages
#+begin_src emacs-lisp :tangle yes
  (use-package quelpa :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle no
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
  ;; (setq use-package-ensure-function 'quelpa)

#+end_src

** elpaca
待定
https://github.com/progfolio/elpaca
* Start Up
** Better defaults

For a better user experience of GNU Emacs, here are the default values I use.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 100                                   ; Set width for automatic line breaks
   mode-require-final-newline t                     ; add a newline to end of file
   help-window-select t                             ; Focus new help windows when opened
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   indent-tabs-mode nil                             ; Space to tab
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   user-full-name "Vermin"                          ; Set the full name of the current user
   user-mail-address "cattlenzq@163.com"            ; Set the email address of the current user
   vc-follow-symlinks t                             ; Always follow the symlinks
   make-backup-files nil							  ; close backup files
   gc-cons-threshold 100000000                      ; lsp need more memory
   read-process-output-max (* 1024 1024)            ; 1mb
   truncate-partial-width-windows nil               ; turn off wrapping long lines
   view-read-only t)                                ; Always open read-only buffers in view-mode
                                          ;  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  ;;(global-linum-mode 1)
  (setq create-lockfiles nil)                       ; disable lock file
  (display-time-mode 1)                             ; Enable time in the mode-line
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                             ; Hightlight current line

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-clipboard-coding-system 'utf-8-unix)
  (set-file-name-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-next-selection-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (setq locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (prefer-coding-system 'utf-8-unix)		;
  ;;(prefer-coding-system 'chinese-gbk)       ; linux system
  ;;(prefer-coding-system 'gb2312-unix)		;
  (show-paren-mode 1)                               ; Show the parent
  (setq show-paren-style 'mixed)
  (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.inc\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))    ; fable template file
  (add-to-list 'auto-mode-alist '("\\.cc.temp\\'" . c++-mode))    ; fable template file
  (add-to-list 'auto-mode-alist '("makefile." . makefile-mode))

  (add-to-list 'image-types 'svg) ; add svg to image-types
#+END_SRC

** Os Set
Set OS special config

use fullcreen on mac os, and use alt instead cmd
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; check OS type
  (cond
   ((string-equal system-type "windows-nt") ; Microsoft Windows
    (progn
      (scroll-bar-mode -1)
      (message "Microsoft Windows")))
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (make-directory "~/.emacs_backups/" t)
      (make-directory "~/.emacs_autosave/" t)
      (setq auto-save-file-name-transforms '((".*" "~/.emacs_autosave/" t)))
      (setq backup-directory-alist '(("." . "~/.emacs_backups/")))
      (setq mac-command-modifier 'control)
      (setq mac-option-modifier 'meta)
      (scroll-bar-mode -1)
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
      (message "Mac OS X")
      ))
   ((string-equal system-type "gnu/linux") ; linux
    (progn
      (make-directory "~/.emacs_backups/" t)
      (make-directory "~/.emacs_autosave/" t)
      (setq auto-save-file-name-transforms '((".*" "~/.emacs_autosave/" t)))
      (setq backup-directory-alist '(("." . "~/.emacs_backups/")))
      (message "Linux"))))
#+END_SRC

** Customization

To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.

I also made sure to follow the XDG base directory specification for the
=auto-save-file= folder, in order to keep my =~/.emacs.d= folder clean.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   auto-save-list-file-name (expand-file-name (format "~/.emacs.d/data/auto-save-list"))
   custom-file (expand-file-name (format "~/.emacs.d/data/custom.el")))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+END_SRC
** Fonts
#+begin_src emacs-lisp :tangle yes
  ;; (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font"))
  ;; (set-face-attribute 'default t :font "JetBrainsMono Nerd Font")

  ;; (set-fontset-font t 'latin (font-spec :family "IntelOne Mono"))
  ;; (set-fontset-font t 'latin (font-spec :family "Cascadia Mono NF"))
  ;; (set-fontset-font t 'han (font-spec :family "霞鹜文楷" :weight 'bold))
  ;; (set-fontset-font t 'kana (font-spec :family "Sarasa Gothic J" :weight 'normal :slant 'normal))

  (when (display-graphic-p)
    (set-face-attribute 'default nil :font "Maple Mono NF CN"))

  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup))

  (use-package cnfonts
    :config
    (cnfonts-mode 1))
#+end_src

** Key Binding
自己适应的一些绑定
#+begin_src emacs-lisp :tangle yes
  ;; use bind-key for key binding
  (use-package bind-key)
  ;; Use s-SPC to set mark
  (bind-key* "M-SPC" 'set-mark-command)
#+end_src

** Hydra
use Hydra for some keybinds
#+begin_src emacs-lisp :tangle yes
  (use-package major-mode-hydra
    :ensure t)
#+end_src
** Shell Path
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; make Emacs use the $PATH set up by the user's shell
  (use-package exec-path-from-shell
    :ensure t
    :config (progn
              (when(not(eq system-type 'windows-nt))
                (setq exec-path-from-shell-variables '("PATH" "PYTHONPATH" "GOPATH" "JAVA_HOME" "GROOVY_HOME" "GRADLE_HOME" "GRADLE_USER_HOME"))
                ;; when it is nil, exec-path-from-shell will read environment variable
                ;; from .zshenv instead of .zshrc, but makes sure that you put all
                ;; environment variable you need in .zshenv rather than .zshrc
                (setq exec-path-from-shell-arguments '("-l" )) ;remove -i read form .zshenv
                (exec-path-from-shell-initialize)
                )
              )
    )
#+END_SRC
** Theme
*NOTE:* to be able to see icons in the =doom-modeline=, you will need to install
[[#Icons][all-the-icons]].

#+begin_src emacs-lisp :tangle no
  (use-package moe-theme
    :config
    ;; Show highlighted buffer-id as decoration. (Default: nil)
    (setq moe-theme-highlight-buffer-id t)

    ;; Resize titles (optional).
    (setq moe-theme-resize-title-markdown '(1.5 1.4 1.3 1.2 1.0 1.0))
    (setq moe-theme-resize-title-org '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
    (setq moe-theme-resize-title-rst '(1.5 1.4 1.3 1.2 1.1 1.0))

    ;; Choose a color for modeline.(Default: blue)
    (setq moe-theme-modeline-color 'cyan)
    ;; Finally, apply moe-theme now.
    ;; Choose what you like, (moe-light) or (moe-dark)
    (moe-light))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package leuven-theme
    :config
    (load-theme 'leuven t))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package ewal
    :config (setq ewal-use-built-in-always-p nil
                  ewal-use-built-in-on-failure-p t
                  ewal-built-in-palette "sexy-material"))
  (use-package ewal-spacemacs-themes
    :init (use-package spacemacs-theme)
    :config (progn
              (setq spacemacs-theme-underline-parens t
                    my:rice:font (font-spec
                                  :family "Cascadia Mono NF"
                                  :weight 'semi-bold
                                  :size 11.0))
              (show-paren-mode +1)
              (global-hl-line-mode)
              (set-frame-font my:rice:font nil t)
              (add-to-list  'default-frame-alist
                            `(font . ,(font-xlfd-name my:rice:font)))
              (load-theme 'ewal-spacemacs-modern t)
              (enable-theme 'ewal-spacemacs-modern)))
  (use-package ewal-evil-cursors
    :after (ewal-spacemacs-themes)
    :config (ewal-evil-cursors-get-colors
             :apply t :spaceline t))
  (use-package spaceline
    :after (ewal-evil-cursors winum)
    :config
    (setq powerline-default-separator nil)
    (spaceline-spacemacs-theme))
#+end_src

spacemacs-theme
#+begin_src emacs-lisp :tangle no
  (use-package spacemacs-theme
    :ensure t
    :config
    (load-theme 'spacemacs-dark :no-confirm))

  (use-package spaceline
    :after spacemacs-theme
    :config (spaceline-spacemacs-theme))

  (use-package spaceline-all-the-icons
    :after spaceline
    :config (spaceline-all-the-icons-theme))
#+end_src

modus-theme
#+begin_src emacs-lisp :tangle no
  (use-package modus-themes
    :ensure t
    :demand t
    :config
    ;; Add all your customizations prior to loading the themes
    ;; In all of the following, WEIGHT is a symbol such as `semibold',
    ;; `light', `bold', or anything mentioned in `modus-themes-weights'.
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui nil
          modus-themes-custom-auto-reload t
          modus-themes-disable-other-themes t

          ;; Options for `modus-themes-prompts' are either nil (the
          ;; default), or a list of properties that may include any of those
          ;; symbols: `italic', `WEIGHT'
          modus-themes-prompts '(italic bold)

          ;; The `modus-themes-completions' is an alist that reads two
          ;; keys: `matches', `selection'.  Each accepts a nil value (or
          ;; empty list) or a list of properties that can include any of
          ;; the following (for WEIGHT read further below):
          ;;
          ;; `matches'   :: `underline', `italic', `WEIGHT'
          ;; `selection' :: `underline', `italic', `WEIGHT'
          modus-themes-completions
          '((matches . (extrabold))
            (selection . (semibold italic text-also)))

          modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

          ;; The `modus-themes-headings' is an alist: read the manual's
          ;; node about it or its doc string.  Basically, it supports
          ;; per-level configurations for the optional use of
          ;; `variable-pitch' typography, a height value as a multiple of
          ;; the base font size (e.g. 1.5), and a `WEIGHT'.
          modus-themes-headings
          '((1 . (variable-pitch 1.5))
            (2 . (1.3))
            (agenda-date . (1.3))
            (agenda-structure . (variable-pitch light 1.8))
            (t . (1.1))))

    ;; Load the theme files before enabling a theme
    ;; (load-theme 'modus-vivendi-tinted :no-confirm)
    (load-theme 'modus-operandi-tritanopia :no-confirm)
    )

  (defvar my-rainbow-region-colors
    (modus-themes-with-colors
     `((red . ,bg-red-subtle)
       (green . ,bg-green-subtle)
       (yellow . ,bg-yellow-subtle)
       (blue . ,bg-blue-subtle)
       (magenta . ,bg-magenta-subtle)
       (cyan . ,bg-cyan-subtle)))
    "Sample list of color values for `my-rainbow-region'.")

  (defun my-rainbow-region (color)
    "Remap buffer-local attribute of `region' using COLOR."
    (interactive
     (list
      (completing-read "Pick a color: " my-rainbow-region-colors)))
    (face-remap-add-relative
     'region
     `( :background ,(alist-get (intern color) my-rainbow-region-colors)
        :foreground ,(face-attribute 'default :foreground))))

  (defun my-rainbow-region-magenta ()
    (my-rainbow-region 'magenta))

  (add-hook 'diff-mode-hook #'my-rainbow-region-magenta)
#+end_src

** mode-line
moody
#+begin_src emacs-lisp :tangle no
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (moody-replace-eldoc-minibuffer-message-function))
#+end_src

doom modeline
#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    ;; If non-nil, cause imenu to see `doom-modeline' declarations.
    ;; This is done by adjusting `lisp-imenu-generic-expression' to
    ;; include support for finding `doom-modeline-def-*' forms.
    ;; Must be set before loading doom-modeline.
    (setq doom-modeline-support-imenu t)

    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    ;; (setq doom-modeline-height 25)

    ;; How wide the mode-line bar should be. It's only respected in GUI.
    ;; (setq doom-modeline-bar-width 4)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    ;; (setq doom-modeline-hud nil)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be
    ;; displayed. It can be an integer or a float number. `nil' means no limit."
    ;; (setq doom-modeline-window-width-limit 85)

    ;; How to detect the project root.
    ;; nil means to use `default-directory'.
    ;; The project management packages have some issues on detecting project root.
    ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
    ;; to hanle sub-projects.
    ;; You can specify one if you encounter the issue.
    (setq doom-modeline-project-detection 'auto)

    ;; Determines the style used by `doom-modeline-buffer-file-name'.
    ;;
    ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   auto => emacs/l/comint.el (in a project) or comint.el
    ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
    ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
    ;;   truncate-with-project => emacs/l/comint.el
    ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
    ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
    ;;   truncate-all => ~/P/F/e/l/comint.el
    ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   relative-from-project => emacs/lisp/comint.el
    ;;   relative-to-project => lisp/comint.el
    ;;   file-name => comint.el
    ;;   file-name-with-project => FOSS|comint.el
    ;;   buffer-name => comint.el<2> (uniquify buffer name)
    ;;
    ;; If you are experiencing the laggy issue, especially while editing remote files
    ;; with tramp, please try `file-name' style.
    ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
    (setq doom-modeline-buffer-file-name-style 'auto)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (setq doom-modeline-icon t)

    ;; Whether display the icon for `major-mode'. It respects option `doom-modeline-icon'.
    (setq doom-modeline-major-mode-icon t)

    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `nerd-icons-color-icons'.
    (setq doom-modeline-major-mode-color-icon t)

    ;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon'.
    (setq doom-modeline-buffer-state-icon t)

    ;; Whether display the modification icon for the buffer.
    ;; It respects option `doom-modeline-icon' and option `doom-modeline-buffer-state-icon'.
    (setq doom-modeline-buffer-modification-icon t)

    ;; Whether display the lsp icon. It respects option `doom-modeline-icon'.
    (setq doom-modeline-lsp-icon t)

    ;; Whether display the time icon. It respects option `doom-modeline-icon'.
    (setq doom-modeline-time-icon t)

    ;; Whether display the live icons of time.
    ;; It respects option `doom-modeline-icon' and option `doom-modeline-time-icon'.
    (setq doom-modeline-time-live-icon t)

    ;; Whether to use an analogue clock svg as the live time icon.
    ;; It respects options `doom-modeline-icon', `doom-modeline-time-icon', and `doom-modeline-time-live-icon'.
    (setq doom-modeline-time-analogue-clock t)

    ;; The scaling factor used when drawing the analogue clock.
    (setq doom-modeline-time-clock-size 0.7)

    ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
    (setq doom-modeline-unicode-fallback nil)

    ;; Whether display the buffer name.
    (setq doom-modeline-buffer-name t)

    ;; Whether highlight the modified buffer name.
    (setq doom-modeline-highlight-modified-buffer-name t)

    ;; When non-nil, mode line displays column numbers zero-based.
    ;; See `column-number-indicator-zero-based'.
    (setq doom-modeline-column-zero-based t)

    ;; Specification of \"percentage offset\" of window through buffer.
    ;; See `mode-line-percent-position'.
    (setq doom-modeline-percent-position '(-3 "%p"))

    ;; Format used to display line numbers in the mode line.
    ;; See `mode-line-position-line-format'.
    (setq doom-modeline-position-line-format '("L%l"))

    ;; Format used to display column numbers in the mode line.
    ;; See `mode-line-position-column-format'.
    (setq doom-modeline-position-column-format '("C%c"))

    ;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format'.
    (setq doom-modeline-position-column-line-format '("%l:%c"))

    ;; Whether display the minor modes in the mode-line.
    (setq doom-modeline-minor-modes nil)

    ;; If non-nil, a word count will be added to the selection-info modeline segment.
    (setq doom-modeline-enable-word-count nil)

    ;; Major modes in which to display word count continuously.
    ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
    ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
    ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
    (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

    ;; Whether display the buffer encoding.
    (setq doom-modeline-buffer-encoding t)

    ;; Whether display the indentation information.
    (setq doom-modeline-indent-info nil)

    ;; Whether display the total line number。
    (setq doom-modeline-total-line-number nil)

    ;; Whether display the icon of vcs segment. It respects option `doom-modeline-icon'."
    (setq doom-modeline-vcs-icon t)

    ;; Whether display the icon of check segment. It respects option `doom-modeline-icon'.
    (setq doom-modeline-check-icon t)

    ;; If non-nil, only display one number for check information if applicable.
    (setq doom-modeline-check-simple-format nil)

    ;; The maximum number displayed for notifications.
    (setq doom-modeline-number-limit 99)

    ;; The maximum displayed length of the branch name of version control.
    (setq doom-modeline-vcs-max-length 12)

    ;; Whether display the workspace name. Non-nil to display in the mode-line.
    (setq doom-modeline-workspace-name t)

    ;; Whether display the perspective name. Non-nil to display in the mode-line.
    (setq doom-modeline-persp-name t)

    ;; If non nil the default perspective name is displayed in the mode-line.
    (setq doom-modeline-display-default-persp-name nil)

    ;; If non nil the perspective name is displayed alongside a folder icon.
    (setq doom-modeline-persp-icon t)

    ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
    (setq doom-modeline-lsp t)

    ;; Whether display the GitHub notifications. It requires `ghub' package.
    (setq doom-modeline-github nil)

    ;; The interval of checking GitHub.
    (setq doom-modeline-github-interval (* 30 60))

    ;; Whether display the modal state.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal t)

    ;; Whether display the modal state icon.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal-icon t)

    ;; Whether display the modern icons for modals.
    (setq doom-modeline-modal-modern-icon t)

    ;; When non-nil, always show the register name when recording an evil macro.
    (setq doom-modeline-always-show-macro-register nil)

    ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
    ;; (setq doom-modeline-mu4e nil)
    ;; also enable the start of mu4e-alert
    ;; (mu4e-alert-enable-mode-line-display)

    ;; Whether display the gnus notifications.
    (setq doom-modeline-gnus t)

    ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
    (setq doom-modeline-gnus-timer 2)

    ;; Wheter groups should be excludede when gnus automatically being updated.
    (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

    ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
    (setq doom-modeline-irc t)

    ;; Function to stylize the irc buffer names.
    (setq doom-modeline-irc-stylize 'identity)

    ;; Whether display the battery status. It respects `display-battery-mode'.
    (setq doom-modeline-battery t)

    ;; Whether display the time. It respects `display-time-mode'.
    (setq doom-modeline-time t)

    ;; Whether display the misc segment on all mode lines.
    ;; If nil, display only if the mode line is active.
    (setq doom-modeline-display-misc-in-all-mode-lines t)

    ;; The function to handle `buffer-file-name'.
    (setq doom-modeline-buffer-file-name-function #'identity)

    ;; The function to handle `buffer-file-truename'.
    (setq doom-modeline-buffer-file-truename-function #'identity)

    ;; Whether display the environment version.
    (setq doom-modeline-env-version t)
    ;; Or for individual languages
    (setq doom-modeline-env-enable-python t)
    (setq doom-modeline-env-enable-ruby t)
    (setq doom-modeline-env-enable-perl t)
    (setq doom-modeline-env-enable-go t)
    (setq doom-modeline-env-enable-elixir t)
    (setq doom-modeline-env-enable-rust t)

    ;; Change the executables to use for the language version string
    (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
    (setq doom-modeline-env-ruby-executable "ruby")
    (setq doom-modeline-env-perl-executable "perl")
    (setq doom-modeline-env-go-executable "go")
    (setq doom-modeline-env-elixir-executable "iex")
    (setq doom-modeline-env-rust-executable "rustc")

    ;; What to display as the version while a new one is being loaded
    (setq doom-modeline-env-load-string "...")

    ;; By default, almost all segments are displayed only in the active window. To
    ;; display such segments in all windows, specify e.g.
    (setq doom-modeline-always-visible-segments '(mu4e irc))

    ;; Hooks that run before/after the modeline version string is updated
    (setq doom-modeline-before-update-env-hook nil)
    (setq doom-modeline-after-update-env-hook nil)
    )
#+end_src

** Company
=company= provides auto-completion at point and to Displays a small pop-in
containing the candidates.

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :defer 0.5
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-dabbrev-ignore-case t)
    (company-minimum-prefix-length 1)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    ;;	(delete 'company-dabbrev 'company-backends)
    ;;	(add-to-list 'company-backends #'company-dabbrev)
    ;; (setq company-dabbrev-char-regexp "[\\.0-9a-zA-Z-_'/]")
    ;; (setq company-dabbrev-code-other-buffers 'all)
    (setq completion-ignore-case t)
    ;; company在纯文本的时候使用dabbrev做后端，会默认开启downcase，然后补全都会变成小写
    ;; (setq company-dabbrev-downcase nil)
    ;; 合并capf 和dabbrev
    (add-to-list 'company-backends '(company-capf :with company-dabbrev))
    )



#+END_SRC

I use =company= with =company-box= that allows a company front-end with icons.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-box
    :after company
    :delight
    :hook (company-mode . company-box-mode))
#+END_SRC
** Turn off mouse interface

Since I never use the mouse with GNU Emacs, I prefer not to use certain
graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
I find invasive.

#+BEGIN_SRC emacs-lisp :tangle yes
  (menu-bar-mode -1)              ; Disable the menu bar
  (tool-bar-mode -1)              ; Disable the tool bar
  (tooltip-mode -1)              ; Disable the tooltips
  ;; (scroll-bar-mode -1)           ; Disable the scrollbar
#+END_SRC
** Projectile

#+BEGIN_QUOTE
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

Use build.sh to compile project with build.sh

[[https://github.com/bbatsov/projectile][Bozhidar Batsov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    ;;:defer 1
    :custom
    (projectile-cache-file (expand-file-name (format "~/.emacs.d/cache/projectile.cache")))
    (projectile-globally-ignored-file-suffixes '(".o" ".a"))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    ;;(projectile-keymap-prefix (kbd "C-c p"))
    (projectile-require-project nil)
    (projectile-known-projects-file (expand-file-name (format "~/.emacs.d/cache/projectile-bookmarks.eld")))
    (projectile-mode-line '(:eval (projectile-project-name)))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (add-to-list 'projectile-globally-ignored-directories ".clangd")
    (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
    (projectile-register-project-type 'build-proj '("build.sh")
                                      :compile "./build.sh")
    (projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))
#+END_SRC
** kkp
支持kkp协议
https://sw.kovidgoyal.net/kitty/keyboard-protocol/
#+begin_src emacs-lisp :tangle yes
  (use-package kkp
    :ensure t
    :config
    ;; (setq kkp-alt-modifier 'alt) ;; use this if you want to map the Alt keyboard modifier to Alt in Emacs (and not to Meta)
    (global-kkp-mode +1))
#+end_src
** Rime
中文输入法支持
https://github.com/DogLooksGood/emacs-rime/blob/master/INSTALLATION.org
#+begin_src emacs-lisp :tangle yes
  (use-package rime
    :custom
    (default-input-method "rime"))
#+end_src

** ultra-scroll - for mac
https://github.com/jdtsmith/ultra-scroll
#+begin_src emacs-lisp :tangle yes
  (cond
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (use-package ultra-scroll
        :vc (:url "https://github.com/jdtsmith/ultra-scroll") ; For Emacs>=30
        :init
        (setq scroll-conservatively 3 ; or whatever value you prefer, since v0.4
              scroll-margin 0)        ; important: scroll-margin>0 not yet supported
        :config
        (ultra-scroll-mode 1)))))
  #+end_src
* Languages
** FlyCheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :config
    (global-flycheck-mode)
    )
#+END_SRC
** Citre
部分情况下，服务不一定能编译通过，lsp无法使用，可以采用ctags补全部分
另外现在支持eglot一起使用
另外citre-peak很好用
#+begin_quote
M-n, M-p: Next/prev line.
M-N, M-P: Next/prev definition.
M-l j: Jump to the definition.
C-g: Close the peek window.
#+end_quote
https://github.com/universal-ctags/citre

#+begin_src emacs-lisp :tangle yes
  (use-package citre
    :defer t
    :config
    (require 'citre-config)
    ;; Bind your frequently used commands.  Alternatively, you can define them
    ;; in `citre-mode-map' so you can only use them when `citre-mode' is enabled.
    (global-set-key (kbd "C-x c j") 'citre-jump)
    (global-set-key (kbd "C-x c J") 'citre-jump-back)
    (global-set-key (kbd "C-x c p") 'citre-ace-peek)
    (global-set-key (kbd "C-x c u") 'citre-update-this-tags-file)
    (setq
     ;; Set these if readtags/ctags is not in your path.
     ;; citre-readtags-program "/path/to/readtags"
     ;; citre-ctags-program "/path/to/ctags"
     ;; Set this if you use project management plugin like projectile.  It's
     ;; used for things like displaying paths relatively, see its docstring.
     citre-project-root-function #'projectile-project-root
     ;; Set this if you want to always use one location to create a tags file.
     citre-default-create-tags-file-location 'global-cache
     ;; See the "Create tags file" section above to know these options
     citre-use-project-root-when-creating-tags t
     citre-prompt-language-for-ctags-command t
     ;; By default, when you open any file, and a tags file can be found for it,
     ;; `citre-mode' is automatically enabled.  If you only want this to work for
     ;; certain modes (like `prog-mode'), set it like this.
     citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src
** Tree-sitter
auto install tree sitter
#+begin_src emacs-lisp :tangle yes
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** Eglot
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package project)
  (use-package eglot
    :ensure t
    :after project
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure)
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-hook 'go-mode-hook 'eglot-ensure)
    (add-hook 'lua-mode-hook 'eglot-ensure)
    (add-hook 'sh-mode-hook 'eglot-ensure)
    ;; (add-hook 'java-mode-hook 'eglot-ensure)
    (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
    (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
    (define-key eglot-mode-map (kbd "C-c h") 'eldoc)
    (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions))


  (use-package consult-eglot
    :after consult)

  (use-package consult-eglot-embark
    :after consult-eglot)

  (use-package flycheck-eglot
    :config
    (global-flycheck-eglot-mode 1))
#+END_SRC

**** java
#+begin_src emacs-lisp :tangle no
  (use-package eglot-java
    :config
    (add-hook 'java-mode-hook 'eglot-java-mode)
    (with-eval-after-load 'eglot-java
      (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
      (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
      (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
      (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
      (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
      (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh)))
#+end_src

** LSP
#+BEGIN_SRC emacs-lisp :tangle no
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
    :after (yasnippet company)
    :hook (
           (c++-mode . lsp-deferred)
           (c-mode . lsp-deferred)
           (python-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           ;; (java-mode . lsp-deferred)
           (typescript-mode . lsp-deferred)
           (js-mode . lsp-deferred)
           (lua-mode . lsp-deferred)
           (sh-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration)
           )
    :bind (:map lsp-mode-map
                ("C-c C-d" . lsp-describe-thing-at-point))
    :config
    (setq lsp-auto-guess-root t)       ; Detect project root
    ;; (setq lsp-keymap-prefix "C-c l")
    (setq lsp-semantic-tokens-enable t)
    (setq lsp-semantic-token-faces
          '(("comment" . lsp-face-semhl-comment))
          lsp-semantic-token-modifier-faces nil)
    (custom-set-faces
     '(lsp-face-semhl-comment ((t (:inherit shadow)))))
    (setq lsp-clients-clangd-args '("-j=8" ; 多并发
                                          ;"--malloc-trim" ; 通过malloc_trim定期释放内存，只支持linux，mac 不支持
                                    "--background-index"
                                    "--clang-tidy"
                                    "--completion-style=bundled"
                                    "--pch-storage=memory"
                                    "--header-insertion=iwyu"
                                    "--header-insertion-decorators"))
    (setq lsp-completion-enable t
          lsp-enable-snippet t
          lsp-semantic-highlighting t
          lsp-idle-delay 0.1
          lsp-enable-text-document-color t
          lsp-completion-provider :capf)
    (push 'company-capf company-backends))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-mode-map
                ("C-c n" . lsp-ui-imenu))
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

  ;; Debug
  (use-package dap-mode
    :diminish
    :after lsp-mode
    :functions dap-hydra/nil
    :bind (:map lsp-mode-map
                ("<f5>" . dap-debug)
                ("M-<f5>" . dap-hydra))
    :config
    (setq dap-python-executable "python3")
    (dap-auto-configure-mode)
    :hook ((after-init . dap-mode)
           (dap-mode . dap-ui-mode)
           (dap-session-created . (lambda (&_rest) (dap-hydra)))
           (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))
           (python-mode . (lambda () (require 'dap-python)))
           (ruby-mode . (lambda () (require 'dap-ruby)))
           (go-mode . (lambda () (require 'dap-go)))
           (java-mode . (lambda () (require 'dap-java)))
           ((c-mode c++-mode objc-mode swift) . (lambda () (require 'dap-lldb)))
           (php-mode . (lambda () (require 'dap-php)))
           (elixir-mode . (lambda () (require 'dap-elixir)))
           ((js-mode js2-mode) . (lambda () (require 'dap-chrome)))))

  (with-eval-after-load 'lsp-mode
    (require 'dap-cpptools))

  ;; `lsp-mode' and `treemacs' integration.
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    )

  ;;  (use-package company-lsp
  ;;    :config (push 'company-lsp company-backends)
  ;;    )

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol
    )
#+END_SRC

**** lsp-java
暂时java开发采用idea，emacs主要是用来合并版本等，开启lsp启动过慢，临时编码ctags足够
#+begin_src emacs-lisp :tangle no
  ;; (setq lsp-java-server-install-dir "")
  (use-package lsp-java
    :config
    (add-hook 'java-mode-hook 'lsp)
    ;; 打开gradle 支持
    (setq lsp-java-import-gradle-enabled t)
    (setq lsp-file-watch-ignored
          '(".idea" ".ensime_cache" ".eunit" "node_modules"
            ".git" ".hg" ".fslckout" "_FOSSIL_"
            ".bzr" "_darcs" ".tox" ".svn" ".stack-work"
            "build"))
    ;; 打开code lens 支持
    (setq lsp-java-references-code-lens-enabled t)
    ;; java启动二进制
    (setq lsp-java-java-path "/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home/bin/java"
          ;; 默认java8
          lsp-java-configuration-runtimes '[(:name "OpenJDK"
                                                   :path "/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home")
                                            (:name "Java8"
                                                   :path "/Library/Java/JavaVirtualMachines/jdk1.8.0_341.jdk/Contents/Home"
                                                   :default t)])
    ;; I also set dap-java-java-command but it seems to only have effect on :request compile_attach
    (setq dap-java-java-command "/Library/Java/JavaVirtualMachines/jdk1.8.0_341.jdk/Contents/Home/bin/java"))

  (require 'lsp-java-boot)
  ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)

#+end_src

**** lsp-python
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; sudo npm install -g pyright
  ;; sudo npm update -g pyright
  (use-package lsp-pyright
    :ensure t
    :config
    (setq lsp-pyright-python-executable-cmd "python3")
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred

#+END_SRC

** GDB
暂时先配置多窗口调试
#+begin_src emacs-lisp :tangle yes
  ;; use gdb in many windows by default
  (setq gdb-many-windows t)
  ;; non-nil display sourcce file containing the main routine at startup
  ;; (setq gdb-show-main t)
  ;; (setq gdb-use-separate-io-buffer 1)
#+end_src
** RealGud
use realgud for debug

#+begin_src emacs-lisp :tangle no
  ;; maybe need run M-x package-refresh-contents RET first
  (use-package realgud
    :ensure t
    )
#+end_src
** Format All
format all languages
针对python自定义一个format支持black超长行换行
主动打开各个语言的format，否则如果没有配置formater，会报错
#+begin_src emacs-lisp :tangle yes
  (use-package format-all
    :ensure-system-package
    ((pg_format . pgformatter)
     (black . black))
    :config
    (setq-default format-all-formatters
                  ;; sql 默认用pg
                  '(("SQL" pg_format)))
    (add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
    ;; 主动打开各个mode的hook
    (add-hook 'emacs-lisp-mode-hook 'format-all-mode)
    (add-hook 'lua-mode-hook 'format-all-mode)
    (add-hook 'protobuf-mode-hook 'format-all-mode)
    (add-hook 'json-mode-hook 'format-all-mode)
    (add-hook 'sql-mode-hook 'format-all-mode)
    (define-format-all-formatter g-clang-format
      (:executable "clang-format")
      (:install
       (macos "brew install clang-format")
       (windows "scoop install llvm"))
      (:languages "C" "C++")
      (:features region)
      (:format
       (format-all--buffer-easy
        executable
        "-style=google"
        "-assume-filename"
        (or (buffer-file-name)
            (cdr (assoc language
                        '(("C"               . ".c")
                          ("C++"             . ".cpp")))))
        (when region
          (list "--offset" (number-to-string (1- (car region)))
                "--length" (number-to-string (- (cdr region) (car region))))))))
    (add-hook 'c-mode-hook 'format-all-mode)
    (add-hook 'c++-mode-hook 'format-all-mode)
    (add-hook 'c-mode-hook #'(lambda ()
                               (setq-local format-all-formatters '(("C++" g-clang-format)))))
    (add-hook 'c++-mode-hook #'(lambda ()
                                 (setq-local format-all-formatters '(("C++" g-clang-format)))))
    (define-format-all-formatter myblack
      (:executable "black")
      (:install "pip install black")
      (:languages "Python")
      (:features)
      (:format (format-all--buffer-easy
                executable "-q" "--experimental-string-processing"
                (when (format-all--buffer-extension-p "pyi") "--pyi")
                "-")))
    (add-hook 'python-mode-hook 'format-all-mode)
    (add-hook 'python-mode-hook #'(lambda ()
                                    (setq-local format-all-formatters '(("Python" myblack))))))
#+end_src
** Shell
add shell support
#+begin_src emacs-lisp :tangle yes
  (use-package bash-completion
    :config
    (bash-completion-setup)
    )
#+end_src

add shell check
#+begin_src emacs-lisp :tangle yes
  (use-package flymake-shellcheck
    :commands flymake-shellcheck-load
    :config
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
#+end_src

Use lsp
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; npm i -g bash-language-server
#+END_SRC

** Common Lisp -- slime
common lisp env
#+begin_src emacs-lisp :tangle yes
  ;; install sbcl first, like:
  ;;     sudo yum install sbcl
  (use-package slime
    :config
    (setq inferior-lisp-program "sbcl")
    )

  (use-package elisp-slime-nav
    :config
    (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
      (add-hook hook 'turn-on-elisp-slime-nav-mode))
    )

  (use-package slime-company
    :after (slime company)
    :config (setq slime-company-completion 'fuzzy
                  slime-company-after-completion 'slime-company-just-one-space))

#+end_src

** Common Lisp -- sly
try sly

#+begin_src emacs-lisp :tangle no
  ;; install sbcl first, like:
  ;;     sudo yum install sbcl
  (use-package sly
    :hook (lisp-mode-hook . sly-editing-mode)
    :config
    (setq inferior-lisp-program "sbcl")
    )

  (use-package sly-quicklisp)
  (use-package sly-named-readtables)
  (use-package sly-macrostep)
#+end_src

** Rainbow Identifiers
try Rainbow Identifiers
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-identifiers
    :config
    (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
    )
#+END_SRC

** Doxygen Comment
Use srecode to genenate doxygen comment
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package srecode
    :config
    (semantic-mode)
    (global-srecode-minor-mode 1)
    )
#+END_SRC

** CMake
CMake support
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cmake-mode
    )

  (use-package cmake-font-lock
    :config
    (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
    (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
    )

  (use-package eldoc-cmake
    :after eldoc
    :hook (cmake-mode . eldoc-cmake-enable)
    )

#+END_SRC

** Yaml
Yaml mode support
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yaml-mode
    :config
    (setq auto-mode-alist  (cons '(".yml$" . yaml-mode) auto-mode-alist))
    )

  (use-package flycheck-yamllint
    :after flycheck
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup)
    )

#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elisp-mode :ensure nil :delight "ξ ")
#+END_SRC

*** Eldoc

Provides minibuffer hints when working with Emacs Lisp.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eldoc
    :delight
    :hook (emacs-lisp-mode . eldoc-mode))
#+END_SRC

** Lua
#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode
    :config
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))
#+end_src
** Python
Lsp-mode will start py on python mode
use [[*Format All][Format All]] to format code

Use pyright
#+BEGIN_SRC shell :tangle no
  pip install --upgrade setuptools
  pip install 'python-language-server[all]'
  pip3 install 'python-language-server[all]'
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Python Mode
  ;; Install:
  ;;   pip install pyflakes
  ;;   pip install autopep8
  ;;   change to python3
  (use-package python
    :ensure nil
    :defines gud-pdb-command-name pdb-path
    :config
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    (setq python-indent-offset 4
          python-sort-imports-on-save t
          python-shell-interpreter "python3"
          pippel-python-command "python3"
          importmagic-python-interpreter "python3"
          flycheck-python-pylint-executable "pylint"
          flycheck-python-flake8-executable "flake8")

    (add-hook 'inferior-python-mode-hook
              (lambda ()
                ;; (bind-key "C-c C-z" #'kill-buffer-and-window inferior-python-mode-map)
                (process-query-on-exit-flag (get-process "Python"))))

    ;; Live Coding in Python
    (use-package live-py-mode))
#+END_SRC

** C++
c++ lsp server
disable cquery and ccls to use clangd as lsp server

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-c-style				;
    :hook ((c-mode c++-mode) . google-set-c-style)
    (c-mode-common . google-make-newline-indent))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; C/C++ Mode -- use google c-style
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
                ("C-c c" . compile))
    ;;:hook (c-mode-common . (lambda ()
    ;;            (c-set-style "k&r")
    ;;            (setq tab-width 4)
    ;;            (setq c-basic-offset 4)))
    )
#+END_SRC

#+BEGIN_SRC  emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :ensure t)
#+END_SRC

** Java
lsp-java 改lsp目录，这里为其他java相关配置
#+begin_src emacs-lisp :tangle yes
  (use-package gradle-mode
    :config
    (setq gradle-executable-path "/Users/vermin/code_tools/gradle-4.10.3/bin/gradle")
    (add-hook 'java-mode-hook (lambda ()
                                (setq c-default-style "java")
                                (gradle-mode 1))))
#+end_src
** Groovy
#+begin_src emacs-lisp :tangle yes
  (use-package groovy-mode)
  (use-package groovy-imports)
#+end_src

** Markdown
Grip use github api Need github account try other
#+BEGIN_SRC emacs-lisp :tangle no
  ;; try grip-mode
  ;; Grip install:
  ;;      Python
                                          ;:      pip install grip
  (use-package grip-mode
    :ensure t
    :hook ((markdown-mode org-mode) . grip-mode)
    )


  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config (setq markdown-command "multimarkdown"))

#+END_SRC

** GO
#+BEGIN_SRC emacs-lisp :tangle yes
     ;;; Commentary:
  ;;
  ;; Golang configurations.
  ;;       export GO111MODULE=on
  ;;       export GOPROXY=https://goproxy.cn
  ;;       export GOPATH="/usr/local/gopath/"
  ;;       export PATH="$GOPATH/bin:$PATH"
  ;;       go get golang.org/x/tools/gopls@latest
  ;;
  ;; Go packages:
  ;; go get -u github.com/mdempsky/gocode
  ;; go get -u github.com/rogpeppe/godef
  ;; go get -u golang.org/x/tools/cmd/gopls
  ;; go get -u golang.org/x/tools/cmd/goimports
  ;; go get -u golang.org/x/tools/cmd/gorename
  ;; go get -u golang.org/x/tools/cmd/gotype
  ;; go get -u golang.org/x/tools/cmd/godoc
  ;; go get -u github.com/go-delve/delve/cmd/dlv
  ;; go get -u github.com/josharian/impl
  ;; go get -u github.com/cweill/gotests/...
  ;; go get -u github.com/fatih/gomodifytags
  ;; go get -u github.com/davidrjenni/reftools/cmd/fillstruct
  ;; go get -u github.com/uudashr/gopkgs/cmd/gopkgs
  ;; go get -u onnef.co/go/tools/...
  ;;

  ;; Golang
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "GOROOT")

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  ;;(defun lsp-go-install-save-hooks ()
  ;; (add-hook 'before-save-hook #'lsp-format-buffer t t)
  ;; (add-hook 'before-save-hook #'lsp-organize-imports t t))
  ;;(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;; (lsp-register-custom-settings
  ;;   '(("gopls.completeUnimported" t t)
  ;;     ("gopls.staticcheck" t t)))

  (use-package go-mode
    :bind (:map go-mode-map
                ([remap xref-find-definitions] . godef-jump)
                ("C-c R" . go-remove-unused-imports)
                ("<f1>" . godoc-at-point))
    :config
    ;; Format with `goimports' if possible, otherwise using `gofmt'
    (when (executable-find "goimports")
      (setq gofmt-command "goimports"))
    (add-hook 'before-save-hook #'gofmt-before-save)

    (use-package go-projectile)
    (use-package go-dlv)
    (use-package go-fill-struct)
    (use-package go-rename)
    (use-package golint)
    (use-package govet)

    ;;   (use-package go-gopath
    ;;     :bind (
    ;;       :map go-mode-map
    ;;       ("C-c C-e" . go-gopath-set-gopath)
    ;;     )
    ;;   )

    (use-package go-impl
      :functions (go-packages-gopkgs go-root-and-paths go-packages-fd)
      :config
      ;; `go-packages-native', remiplement it.
      (cond
       ((executable-find "gopkgs")
        (defun go-packages-gopkgs()
          "Return a list of all Go packages, using `gopkgs'."
          (sort (process-lines "gopkgs") #'string<))
        (setq go-packages-function #'go-packages-gopkgs))
       ((executable-find "fd")
        (defun go-packages-fd ()
          "Return a list of all installed Go packages, using `fd'."
          (sort
           (delete-dups
            (cl-mapcan
             '(lambda (topdir)
                (let ((pkgdir (concat topdir "/pkg/")))
                  (--> (shell-command-to-string (concat "fd -e a . " pkgdir))
                       (split-string it "\n")
                       (-map (lambda (str)
                               (--> (string-remove-prefix pkgdir str)
                                    (string-trim-left it ".*?/")
                                    (string-remove-suffix ".a" it)
                                    )
                               ) it))))
             (go-root-and-paths)))
           #'string<))
        (setq go-packages-function #'go-packages-fd))))

    (use-package go-tag
      :bind (:map go-mode-map
                  ("C-c t" . go-tag-add)
                  ("C-c T" . go-tag-remove))
      :config (setq go-tag-args (list "-transform" "camelcase")))

    (use-package go-gen-test
      :bind (:map go-mode-map
                  ("C-c C-t" . go-gen-test-dwim)))

    (use-package gotest
      :bind (:map go-mode-map
                  ("C-c a" . go-test-current-project)
                  ("C-c m" . go-test-current-file)
                  ("C-c ." . go-test-current-test)
                  ("C-c x" . go-run))))

  ;; Local Golang playground for short snippets
  (use-package go-playground
    :diminish
    :commands go-playground-mode)

#+END_SRC
** Protobuf
Proto buf support
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package protobuf-mode
    :config
    (setq auto-mode-alist  (cons '(".proto$" . protobuf-mode) auto-mode-alist))
    )

#+END_SRC

** k8s
k8s-mode
#+begin_src emacs-lisp :tangle yes
  (use-package k8s-mode
    :ensure t
    :hook (k8s-mode . yas-minor-mode)
    :config
    ;; Set indent offset
    (setq k8s-indent-offset nil)
    ;; The site docs URL
    (setq k8s-site-docs-url "https://kubernetes.io/docs/reference/generated/kubernetes-api/")
    ;; The defautl API version
    (setq k8s-site-docs-version "v1.3")
    ;; The browser funtion to browse the docs site. Default is `browse-url-browser-function`
    (setq k8s-search-documentation-browser-function nil)
                                          ; Should be a X11 browser
                                          ;(setq k8s-search-documentation-browser-function (quote browse-url-firefox))
    )
#+end_src

** dockerfile
dockerfile-mode
#+begin_src emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    )
#+end_src

** Json
Json mode default key binding
#+begin_quote
C-c C-f: format the region/buffer with json-reformat (https://github.com/gongo/json-reformat)
C-c C-p: display a path to the object at point with json-snatcher (https://github.com/Sterlingg/json-snatcher)
C-c P: copy a path to the object at point to the kill ring with json-snatcher (https://github.com/Sterlingg/json-snatcher)
C-c C-t: Toggle between true and false at point
C-c C-k: Replace the sexp at point with null
C-c C-i: Increment the number at point
C-c C-d: Decrement the number at point
#+end_quote

#+begin_src emacs-lisp :tangle yes
  (use-package json-mode)
  ;; (use-package json-navigator)
  (use-package jmespath)
  (use-package x-path-walker)
#+end_src

** JavaScript/TypeScript
js/ts

use web-mode
#+begin_src emacs-lisp :tangle yes
  (use-package web-mode
    :defer 2
    :after (add-node-modules-path)
    :ensure t
    :mode ("\\.html?\\'"
           "/themes/.*\\.php?\\'"
           "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'"
           "\\.\\(handlebars\\|hbs\\)\\'")
    :config (progn
              (setq
               web-mode-markup-indent-offset 2
               web-mode-css-indent-offset 2
               web-mode-code-indent-offset 2
               web-mode-enable-auto-closing t
               web-mode-enable-auto-opening t
               web-mode-enable-auto-pairing t
               web-mode-enable-auto-indentation t
               web-mode-enable-auto-quoting t
               web-mode-enable-current-column-highlight t
               web-mode-enable-current-element-highlight t
               web-mode-content-types-alist
               '(("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'")))))
#+end_src

js/ts support
#+begin_src emacs-lisp :tangle yes
  (use-package react-snippets)
  (use-package typescript-mode)
#+end_src

* Advanced Configuration
** visual-regexp
支持标准正则
#+begin_src emacs-lisp :tangle yes
  ;; 安装
  (use-package visual-regexp
    :ensure t
    :config
    (define-key global-map (kbd "C-c q") 'vr/query-replace)
    ;; if you use multiple-cursors, this is for you:
    (define-key global-map (kbd "C-c m") 'vr/mc-mark))
  (use-package visual-regexp-steroids
    :ensure t
    :after visual-regexp)
#+end_src
** goggles
复制粘贴高亮
#+begin_src emacs-lisp :tangle yes
  (use-package goggles
    :hook ((prog-mode text-mode) . goggles-mode)
    :config
    (setq-default goggles-pulse t))
#+end_src

** Read only
emacs java 模式 主要用来看代码，防止误操作
#+begin_src emacs-lisp :tangle yes
  (use-package read-only-cfg
    :config
    (read-only-cfg-mode 1))
#+end_src

** parrot
摇头鹦鹉
#+begin_src emacs-lisp :tangle yes
  (use-package parrot
    :config
    (parrot-mode))
#+end_src

** nyan-mode
彩虹猫
#+begin_src emacs-lisp :tangle yes
  (use-package nyan-mode
    :config
    (nyan-mode))
#+end_src

** Saveplace
每次打开文件回到上次光标位置
#+begin_src  emacs-lisp :tangle yes
  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))
#+end_src
** Bing-dict
#+begin_src emacs-lisp :tangle yes
  (use-package bing-dict
    :config
    (global-set-key (kbd "C-c d") 'bing-dict-brief))
#+end_src
** Helpful
#+begin_src emacs-lisp :tangle yes
  (use-package helpful
    :ensure t
    :pretty-hydra
    ((:color teal :quit-key "q")
     ("Helpful"
      (("f" helpful-callable "callable")
       ("v" helpful-variable "variable")
       ("k" helpful-key "key")
       ("c" helpful-command "command")
       ("d" helpful-at-point "thing at point"))))
    :bind ("C-h" . helpful-hydra/body))
#+end_src

** Undo tree
better undo && redo
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :config
    (setq undo-tree-auto-save-history nil) ; 去掉自动保存history文件
    (global-undo-tree-mode)
    )
#+end_src

** Move-dup
for code move
#+begin_src emacs-lisp :tangle yes
  (use-package move-dup
    :bind (("M-p"   . move-dup-move-lines-up)
           ("C-M-p" . move-dup-duplicate-up)
           ("M-n"   . move-dup-move-lines-down)
           ("C-M-n" . move-dup-duplicate-down)))
#+end_src

** Multiple-cursors
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    )


  (use-package mc-extras
    :after multiple-cursors
    :config
    (define-key mc/keymap (kbd "C-. M-C-f") 'mc/mark-next-sexps)
    (define-key mc/keymap (kbd "C-. M-C-b") 'mc/mark-previous-sexps)
    (define-key mc/keymap (kbd "C-. <") 'mc/mark-all-above)
    (define-key mc/keymap (kbd "C-. >") 'mc/mark-all-below)

    (define-key mc/keymap (kbd "C-. C-d") 'mc/remove-current-cursor)
    (define-key mc/keymap (kbd "C-. C-k") 'mc/remove-cursors-at-eol)
    (define-key mc/keymap (kbd "C-. d")   'mc/remove-duplicated-cursors)
    (define-key mc/keymap (kbd "C-. C-o") 'mc/remove-cursors-on-blank-lines)

    (define-key mc/keymap (kbd "C-. .")   'mc/move-to-column)
    (define-key mc/keymap (kbd "C-. =")   'mc/compare-chars)

    ;; Emacs 24.4+ comes with rectangle-mark-mode.
    (define-key rectangle-mark-mode-map (kbd "C-. C-,") 'mc/rect-rectangle-to-multiple-cursors)

    (define-key cua--rectangle-keymap   (kbd "C-. C-,") 'mc/cua-rectangle-to-multiple-cursors)
    (mc/cua-rectangle-setup))

  (use-package ace-mc
    :after (multiple-cursors)
    :config
    (global-set-key (kbd "C-)") 'ace-mc-add-multiple-cursors)
    (global-set-key (kbd "C-M-)") 'ace-mc-add-single-cursor))
#+end_src

** Easy Kill && easy mark
M-w for kill && mark
#+begin_src emacs-lisp :tangle yes
  (use-package easy-kill
    :config
    (global-set-key [remap kill-ring-save] 'easy-kill)
    (global-set-key [remap mark-sexp] 'easy-mark))

  (use-package easy-kill-extras
    :after (multiple-cursors easy-kill)
    :config
    ;; Upgrade `mark-word' and `mark-sexp' with easy-mark
    ;; equivalents.
    (global-set-key (kbd "M-@") 'easy-mark-word)
    (global-set-key (kbd "C-M-@") 'easy-mark-sexp)

    ;; `easy-mark-to-char' or `easy-mark-up-to-char' could be a good
    ;; replacement for `zap-to-char'.
    (global-set-key [remap zap-to-char] 'easy-mark-to-char)

    ;; Integrate `expand-region' functionality with easy-kill
    (define-key easy-kill-base-map (kbd "o") 'easy-kill-er-expand)
    (define-key easy-kill-base-map (kbd "i") 'easy-kill-er-unexpand)

    ;; Add the following tuples to `easy-kill-alist', preferrably by
    ;; using `customize-variable'.
    (add-to-list 'easy-kill-alist '(?^ backward-line-edge ""))
    (add-to-list 'easy-kill-alist '(?$ forward-line-edge ""))
    (add-to-list 'easy-kill-alist '(?b buffer ""))
    (add-to-list 'easy-kill-alist '(?< buffer-before-point ""))
    (add-to-list 'easy-kill-alist '(?> buffer-after-point ""))
    (add-to-list 'easy-kill-alist '(?f string-to-char-forward ""))
    (add-to-list 'easy-kill-alist '(?F string-up-to-char-forward ""))
    (add-to-list 'easy-kill-alist '(?t string-to-char-backward ""))
    (add-to-list 'easy-kill-alist '(?T string-up-to-char-backward ""))
    (define-key mc/keymap (kbd "C-. M-C-f") 'mc/mark-next-sexps)
    (define-key mc/keymap (kbd "C-. M-C-b") 'mc/mark-previous-sexps)
    (define-key mc/keymap (kbd "C-. <") 'mc/mark-all-above)
    (define-key mc/keymap (kbd "C-. >") 'mc/mark-all-below)

    (define-key mc/keymap (kbd "C-. C-d") 'mc/remove-current-cursor)
    (define-key mc/keymap (kbd "C-. C-k") 'mc/remove-cursors-at-eol)
    (define-key mc/keymap (kbd "C-. d")   'mc/remove-duplicated-cursors)
    (define-key mc/keymap (kbd "C-. C-o") 'mc/remove-cursors-on-blank-lines)

    (define-key mc/keymap (kbd "C-. C-.") 'mc/freeze-fake-cursors-dwim)

    (define-key mc/keymap (kbd "C-. .")   'mc/move-to-column)
    (define-key mc/keymap (kbd "C-. =")   'mc/compare-chars)

    ;; Emacs 24.4+ comes with rectangle-mark-mode.
    (define-key rectangle-mark-mode-map (kbd "C-. C-,") 'mc/rect-rectangle-to-multiple-cursors))

#+end_src

** Beacon
find cursor
#+begin_src emacs-lisp :tangle yes
  (use-package beacon
    :ensure t
    :demand t
    :config
                                          ; https://github.com/Malabarba/beacon/issues/46
                                          ; the value is compared with >, not >=
    (setq beacon-blink-when-point-moves-vertically 1)
                                          ; disable beacon for horizontal movement
    (setq beacon-blink-when-point-moves-horizontally 1)
                                          ; remove specific symbols from the variable 'beacon-dont-blink-commands
    (setq beacon-dont-blink-commands '(forward-char backward-char meow-right meow-left))
    (beacon-mode 1))
#+end_src

** Hungry delete
delete all space
#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode)
    )
#+end_src

** Highlight Indent

#+begin_src emacs-lisp :tangle yes
  (use-package indent-guide
    :config
    (set-face-background 'indent-guide-face "cyan")
    (indent-guide-global-mode)
    )
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package highlight-indentation
    :hook (
           (prog-mode . highlight-indentation-mode)
           (protobuf-mode . highlight-indentation-mode)
           ;; (prog-mode . highlight-indentation-current-column-mode)
           ;; (protobuf-mode . highlight-indentation-current-column-mode)
           )
    :config
    (set-face-background 'highlight-indentation-face "green")
    (set-face-background 'highlight-indentation-current-column-face "magenta")

    )
#+end_src

charater 模式，有时候会引起换行错误，改为colum
#+begin_src emacs-lisp :tangle no
  (use-package highlight-indent-guides
    :hook (
           (prog-mode . highlight-indent-guides-mode)
           (protobuf-mode . highlight-indent-guides-mode)
           )
    :config
    (setq highlight-indent-guides-method 'charater)
    )
#+end_src

** Icons
To integrate icons with =doom-modeline=, =switch-to-buffer=, =counsel-find-file=
and many other functions; [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] is just the best package that you can
find.

*NOTE:* if it's the first time that you install the package, you must run
=M-x all-the-icons-install-fonts=.
*** all-the-icons
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :after (projectile ibuffer ibuffer-projectile ivy-rich)
    :config (all-the-icons-ivy-rich-mode 1))

  (use-package all-the-icons-ibuffer
    :after (projectile ibuffer ibuffer-projectile)
    :ensure t
    :config (all-the-icons-ibuffer-mode 1))
#+END_SRC

*** nerd-icons
#+begin_src emacs-lisp :tangle yes
  (use-package nerd-icons
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    (nerd-icons-font-family "Cascadia Mono NF")
    )

  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-completion
    :config
    (nerd-icons-completion-mode))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-ivy-rich
    :ensure t
    :after ivy-rich
    :init
    (nerd-icons-ivy-rich-mode 1)
    (ivy-rich-mode 1))
#+end_src

** Dashboard

Always good to have a dashboard.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 5)
                            (projects . 20)
                            (agenda . 10)
                            (registers . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (dashboard-setup-startup-hook)
    )
#+END_SRC

** Dired

For those who didn't know, GNU Emacs is also a file explorer.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dired
    :ensure nil
    :delight "Dired "
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alh")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))

  (use-package all-the-icons-dired
    :after all-the-icons
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

#+END_SRC
** dirvish
替换dired
#+begin_src emacs-lisp :tangle yes
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("m" "/mnt/"                       "Drives")
       ("t" "~/.local/share/Trash/files/" "TrashCan")))
    :config
    ;; (dirvish-peek-mode)             ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode)      ; similar to `treemacs-follow-mode'
    (setq dirvish-mode-line-format
          '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
          '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg)
          dirvish-side-attributes
          '(vc-state file-size nerd-icons collapse))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    :bind ; Bind `dirvish-fd|dirvish-side|dirvish-dwim' as you see fit
    (("C-c f" . dirvish)
     :map dirvish-mode-map          ; Dirvish inherits `dired-mode-map'
     ("?"   . dirvish-dispatch)     ; contains most of sub-menus in dirvish extensions
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("h"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump)))

#+end_src
** Buffers

Buffers can quickly become a mess. For some people, it's not a problem, but I
like being able to find my way easily.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :after ibuffer
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-projectile-set-filter-groups)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC

** History

Provides the ability to have commands and their history saved so that whenever
you return to work, you can re-run things as you need them. This is not a
radical function, it is part of a good user experience.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length t)
    (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (savehist-file (expand-file-name (format "~/.emacs.d/cache/history")))
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
#+END_SRC

** Which-Key
:PROPERTIES:
:ID:       e3d033d4-6c26-43e6-891b-988e8d4c9a98
:END:
Use Whick-key to help
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :config
    (which-key-mode)
    )
#+END_SRC
** wgrep
修改 counsel-rg 出来的结果需要
#+begin_src emacs-lisp :tangle yes
  (use-package wgrep)
#+end_src
** Ivy

I used =helm= before, but I find =ivy= faster and lighter.

#+BEGIN_QUOTE
Ivy is a generic completion mechanism for Emacs. While it operates similarly to
other completion schemes such as icomplete-mode, Ivy aims to be more efficient,
smaller, simpler, and smoother to use yet highly customizable.

[[https://github.com/abo-abo/ivy][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package counsel
    :after ivy
    :delight
    :bind (
           ("C-x C-d" . counsel-dired-jump)
           ("C-x C-h" . counsel-minibuffer-history)
           ("C-x C-l" . counsel-find-library)
           ("C-x C-r" . counsel-recentf)
           ("C-x C-u" . counsel-unicode-char)
           ("C-x C-v" . counsel-set-variable)
           ("C-c n" . counsel-imenu)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-rg)
           ("C-x l" . counsel-locate)
           ("M-x" . counsel-M-x)
           )
    :config (counsel-mode)
    :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s"))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode)
    )

  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless)))

  (use-package ivy
    :delight
    :defer 0.1
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ;; use for recent file
           ;; ("C-x C-r"   . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-i" . ivy-partial-or-done)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-switch-buffer-kill))
    :custom
    (ivy-case-fold-search-default t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-use-virtual-buffers t)
    :config
    (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))
    (ivy-mode))

  (use-package ivy-pass
    :after ivy
    :commands ivy-pass)

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config (ivy-rich-mode 1))

  ;; (use-package all-the-icons-ivy
  ;;   :after (all-the-icons ivy)
  ;;   :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
  ;;   :config
  ;;   (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  ;;   (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  ;;   (all-the-icons-ivy-setup))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))
#+END_SRC
** Corfu

#+begin_src emacs-lisp :tangle no
  ;; Enable Corfu completion UI
  ;; See the Corfu README for more configuration tips.
  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :config
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :config
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :config
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :config
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src
** Avy
Navigation with Avy
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :config
    (avy-setup-default)
    :bind (
           ("C-;" . avy-goto-char)
           ;; ("M-g c" . avy-goto-char)
           ("C-'" . avy-goto-char-2)
           ;; ("M-g M-g" . avy-goto-line)
           ("M-g g" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0)
           )
    )

  (use-package ivy-avy
    :after ivy
    )

  (use-package ace-pinyin
    :config
    (ace-pinyin-global-mode +1))
#+end_src
** avyZap
#+begin_src emacs-lisp :tangle yes
  (use-package avy-zap
    :config
    (global-set-key (kbd "M-z") 'avy-zap-to-char-dwim)
    (global-set-key (kbd "M-Z") 'avy-zap-up-to-char-dwim))
#+end_src
** Parentheses

Managing parentheses can be painful. One of the first things you want to do is
to change the appearance of the highlight of the parentheses pairs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#262b36")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))
#+END_SRC

*** =rainbow-delimiters=

#+BEGIN_QUOTE
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
delimiters such as parentheses, brackets or braces according to their
depth. Each successive level is highlighted in a different color. This makes it
easy to spot matching delimiters, orient yourself in the code, and tell which
statements are at a given depth.

[[https://github.com/Fanael/rainbow-delimiters][Fanael Linithien]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** =smartparens=

In my opinion, it is the most powerful package to deal with the
parenthesis. Anyway, if you don't like it, you can try taking a look at
=paredit= or =autopair=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :defer 1
    :delight
    :custom (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1))
#+END_SRC

** Recent Files

Provides fast access to the recent files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package recentf
    :bind ("C-c r" . recentf-open-files)
    :custom
    (recentf-exclude (list "COMMIT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name (format "~/.emacs.d/cache/recentf")))
    :config
    (recentf-mode)
    (run-at-time nil (* 5 60) 'recentf-save-list))
#+END_SRC

** Version Control
magit
https://magit.vc/manual/magit/Installing-from-Melpa.html

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; 配置 Magit
  (use-package magit
    :ensure t
    :defer t
    :bind (("C-x g" . magit-status)      ; 全局快捷键 C-x g 打开 Magit
           ("C-x M-g" . magit-dispatch)) ; 通用 Git 命令入口

    ;; 基础配置
    :config
    ;; (setq magit-auto-revert-mode nil     ; 禁用自动 revert（按需设置）
    ;;       magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1) ; 在当前窗口打开

    ;; 提交消息设置
    ;; (setq git-commit-summary-max-length 50
    ;;       git-commit-fill-column 72)

    ;; 启用自动换行模式（写提交信息时有用）
    (add-hook 'git-commit-mode-hook 'turn-on-auto-fill))

  ;; 可选：在侧边栏显示 Git 状态（需要 diff-hl 包）
  (use-package diff-hl
    :ensure t
    :hook ((prog-mode . diff-hl-mode)      ; 在编程模式启用
           (magit-post-refresh . diff-hl-magit-post-refresh))) ; Magit 刷新后更新

  (use-package magit-delta
    :after magit
    :hook (magit-mode . magit-delta-mode))
#+END_SRC

use diff-hl instead
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diff-hl
    :config
    (global-diff-hl-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package git-gutter
    :defer 0.3
    :delight
    :config (global-git-gutter-mode +1))
#+END_SRC

Finally, one last package that I like to use with Git to easily see the changes
made by previous commits.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine
    :defer 1
    :delight)
#+END_SRC

** Whitespaces

It is often annoying to see unnecessary blank spaces at the end of a line or
file. Let's get ride of them:

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace-cleanup-mode
    :hook (prog-mode . whitespace-cleanup-mode)
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
#+END_SRC
** Word Wrap

I like to have lines of the same length.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :bind ("C-x p" . pop-to-mark-command)
    :hook ((prog-mode . turn-on-auto-fill)
           (text-mode . turn-on-auto-fill))
    :custom (set-mark-command-repeat-pop t))
#+END_SRC

** YASnippet

#+BEGIN_QUOTE
YASnippet is a template system for Emacs. It allows you to type an abbreviation
and automatically expand it into function templates.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :defer t
    :after lsp-mode
    :config
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package auto-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)
#+END_SRC
** Number Window
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package window-numbering			;
    :config
    (window-numbering-mode 1)
    (setq window-numbering-assign-func
          (lambda () (when (equal (buffer-name) "*Calculator*") 9)))
    )
#+END_SRC
** Current word highlight
#+begin_src emacs-lisp :tangle no
  (use-package current-word-highlight
    :config
    (add-hook 'prog-mode-hook 'current-word-highlight-mode)
    )
#+end_src

** Syntax subword
暂时不需要分subword，后续考虑
#+begin_src emacs-lisp :tangle no
  (use-package syntax-subword
    :config
    (global-syntax-subword-mode)
    )
#+end_src

** Whole line or region
#+BEGIN_SRC emacs-lisp :tangle no
  use easy-kill to install this
  (use-package whole-line-or-region
    :config
    (whole-line-or-region-global-mode))
#+END_SRC

** Ediff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ediff
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function 'split-window-horizontally)

    (defun update-diff-colors ()
      "update the colors for diff faces"
      (set-face-attribute 'diff-added nil
                          :foreground "white" :background "blue")
      (set-face-attribute 'diff-removed nil
                          :foreground "white" :background "red3")
      (set-face-attribute 'diff-changed nil
                          :foreground "white" :background "purple"))

    (eval-after-load "diff-mode"
      '(update-diff-colors))
    (with-eval-after-load 'outline
      (add-hook 'ediff-prepare-buffer-hook #'org-show-all))

    ;; Usage: emacs -diff file1 file2
    (defun command-line-diff (switch)
      (let ((file1 (pop command-line-args-left))
            (file2 (pop command-line-args-left)))
        (ediff file1 file2)))

    (add-to-list 'command-switch-alist '("diff" . command-line-diff))

    ;; turn off whitespace checking:
    (setq ediff-diff-options "-w")
    )
#+END_SRC

Use ztree to diff dirs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ztree)
#+END_SRC

#+begin_src emacs-lisp :tangle yes
  (use-package diffview)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package abridge-diff
    :after magit ;; optional, if you'd like to use with magit
    :init (abridge-diff-mode 1))
#+end_src
** Difft
代码对比
https://github.com/wilfred/difftastic
#+begin_src emacs-lisp :tangle yes
  (use-package abridge-diff
    :after magit ;; optional, if you'd like to use with magit
    :ensure-system-package (difft . difftastic)
    :init (abridge-diff-mode 1))
#+end_src
** Symbol overlay
hight light symbol in different color
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package symbol-overlay
    :bind (("M-i" . symbol-overlay-put)
           ("M-n" . symbol-overlay-jump-next)
           ("M-p" . symbol-overlay-jump-prev)
           )
    )
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smex
    :config
    (smex-initialize)
    ;;    :bind (("M-x" . smex)
    ;;	       ("M-X" . smex-major-mode-commands)
    ;;		   ("C-c C-c M-x" . execute-extended-command)
    ;;	      )
    )

#+END_SRC
** Compile
projectile-compile-project 解决build.sh，暂时以下插件不需要
__Use smart compile__
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package smart-compile
    )
#+END_SRC

try Quickrun
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package quickrun
    ;; :config
    ;; ;; Use this parameter in pod-mode
    ;; (quickrun-add-command "c++/build"
    ;;   '((:command . "build.sh")
    ;;     (:default-directory . 'topdir)
    ;;     (:exec    . "./%c"))
    ;;    :mode 'c++-mode)
    )

  (defun git-build ()
    " for git project compile to use ./build.sh "
    (interactive)
    (let* ((cmd "git rev-parse --show-toplevel")
           (topdir (with-temp-buffer
                     (call-process-shell-command cmd nil t nil)
                     (goto-char (point-min))
                     (if (re-search-forward "^\\(.+\\)$" nil t)
                         (match-string 1)))))
      (quickrun :source `((:command . "build.sh")
                          (:default-directory . ,topdir)
                          (:exec . ("./%c"))
                          (:timeout . 1000)))))


  ;;(quickrun-set-default "c" "c++/build")
  ;;(quickrun-set-default "c++" "c++/build")
#+END_SRC
** Refactor
Try emr
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emr
    :config
    (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)
    )
#+END_SRC
** Add multi iedit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package iedit
    :bind (("C-c ;" . iedit-mode)
           )
    )
#+END_SRC

** Comment dwim 2
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package comment-dwim-2
    :config
    (global-set-key (kbd "M-;") 'comment-dwim-2)
    )
#+END_SRC

** Treemacs

#+begin_src emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  ;; (use-package treemacs-evil
  ;;   :after (treemacs evil)
  ;;   :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+end_src
* Org-mode
** Org Common Setting
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :ensure nil
    :commands (org-dynamic-block-define)
    :custom-face (org-ellipsis ((t (:foreground nil))))
    :bind (("C-c a" . org-agenda)
           ("C-c b" . org-switchb)
           ("C-c x" . org-capture))
    :config
    ;;将archive项按日期树组织
    (setq org-archive-location "%s_archive::datetree/")
    ;; 打开tab自动补全 <s
    (require 'org-tempo)
    ;; shifttab when open org files
    (add-hook 'org-mode-hook (lambda () (org-shifttab)))
    ;; org 模式打开自动换行
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; For hydra
    (defun hot-expand (str &optional mod)
      "Expand org template.
          STR is a structure template string recognised by org like <s. MOD is a
          string with additional parameters to add the begin line of the
          structure element. HEADER string includes more parameters that are
          prepended to the element after the #+HEADER: tag."
      (let (text)
        (when (region-active-p)
          (setq text (buffer-substring (region-beginning) (region-end)))
          (delete-region (region-beginning) (region-end)))
        (insert str)
        (if (fboundp 'org-try-structure-completion)
            (org-try-structure-completion) ; < org 9
          (progn
            ;; New template expansion since org 9
            (require 'org-tempo nil t)
            (org-tempo-complete-tag)))
        (when mod (insert mod) (forward-line))
        (when text (insert text))))

    ;; To speed up startup, don't put to init section
    (setq org-modules nil                 ; Faster loading
          org-todo-keywords
          '((sequence "TODO(t)" "DOING(i)" "HANGUP(h)" "|" "DONE(d)" "CANCEL(c)")
            (sequence "⚑(T)" "🏴(I)" "❓(H)" "|" "✔(D)" "✘(C)"))
          org-todo-keyword-faces '(("HANGUP" . warning)
                                   ("❓" . warning))
          org-priority-faces '((?A . error)
                               (?B . warning)
                               (?C . success))

          org-tags-column -80
          org-log-done 'time
          org-catch-invisible-edits 'smart
          org-startup-indented t
          ;; 图片显示
          org-startup-with-inline-images t
          org-ellipsis (if (and (display-graphic-p) (char-displayable-p ?⏷)) "\t⏷" nil)
          org-pretty-entities nil
          org-export-with-sub-superscripts nil
          org-hide-emphasis-markers t))

  ;; 子项目完成，主项目自动完成
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

** org-reverse-datetree
按时间逆序归档
#+begin_src emacs-lisp
  (use-package org-reverse-datetree)
#+end_src
** Org bullets
Show org-mode bullets as UTF-8 characters.

#+begin_src emacs-lisp :tangle no
  (use-package org-bullets
    :custom
    (org-bullets-bullet-list '("◉" "☯" "○" "☯" "✸" "☯" "✿" "☯" "✜" "☯" "◆" "☯" "▶"))
    (org-ellipsis "⤵")
    :hook (org-mode . org-bullets-mode))

  (use-package org-fancy-priorities
    :ensure t
    :hook
    (org-mode . org-fancy-priorities-mode))
#+end_src

** Org babel
#+begin_src emacs-lisp :tangle yes
  ;; Babel
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t)

  (defvar load-language-list '((emacs-lisp . t)
                               (perl . t)
                               (python . t)
                               (ruby . t)
                               (js . t)
                               (css . t)
                               (sass . t)
                               (C . t)
                               (java . t)
                               (groovy . t)
                               (plantuml . t)))

  ;; ob-sh renamed to ob-shell since 26.1.
  (cl-pushnew '(shell . t) load-language-list)

  (use-package ob-go
    :config
    (cl-pushnew '(go . t) load-language-list))

  (use-package ob-rust
    :config
    (cl-pushnew '(rust . t) load-language-list))

  ;; Use mermadi-cli: npm install -g @mermaid-js/mermaid-cli
  (use-package ob-mermaid
    :config
    (cl-pushnew '(mermaid . t) load-language-list))

  (org-babel-do-load-languages 'org-babel-load-languages
                               load-language-list)

  (nconc org-babel-default-header-args:java
         '((:dir . ".cache")))

#+end_src
** Org QL
This package provides a query language for Org files. It offers two syntax styles: Lisp-like sexps and search engine-like keywords.
use libraries org-ql and org-ql-view.
#+begin_src emacs-lisp :tangle yes
  (use-package org-ql)
  (use-package helm-org-ql)
#+end_src

** Org sidebar
Use age
org-sidebar-tree: Display tree-view sidebar for current Org buffer.
org-sidebar-tree-toggle: Toggle tree-view sidebar.
org-sidebar: Display the default item sidebars for the current Org buffer.
org-sidebar-toggle: Toggle default sidebars.
#+begin_src emacs-lisp :tangle yes
  (use-package org-sidebar)
#+end_src

** Org Superstar
try org modern
#+begin_src emacs-lisp :tangle no
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    )
#+end_src
** Org modern
#+begin_src emacs-lisp :tangle yes
  (use-package org-modern
    :ensure t
    :custom
    (org-indent-mode -1)
    (org-modern-hide-stars nil)		; adds extra indentation
    (org-modern-table nil)
    (org-modern-list
     '(;; (?- . "-")
       (?* . "•")
       (?+ . "‣")))
    :config
    (with-eval-after-load 'org (global-org-modern-mode))
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     ;; 下面这个开启以后，会按公式显示 a_b 这种展示为下标
     ;; org-pretty-entities t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")

    ;; Ellipsis styling
    ;; (setq org-ellipsis "…")
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))

  ;; :hook
  ;; (org-mode . org-modern-mode)
  ;; (org-agenda-finalize . org-modern-agenda))
#+end_src
** Org tag beautify
#+begin_src emacs-lisp :tangle no
  (use-package org-tag-beautify
    :ensure t
    :config (org-tag-beautify-mode 1))
#+end_src
** Org Super Agenda
#+begin_src emacs-lisp :tangle yes
  (use-package org-super-agenda
    :config
    (org-super-agenda-mode))
#+end_src

** Org appear
#+begin_src emacs-lisp :tangle yes
  (use-package org-appear
    :hook
    (org-mode . org-appear-mode))
#+end_src
** Org Valign
#+begin_src emacs-lisp :tangle no
  (use-package valign
    :config
    (setq valign-fancy-bar t)
    (add-hook 'org-mode-hook #'valign-mode))
#+end_src

** Calfw
相关命令 cfw: xxxxx
#+begin_src emacs-lisp :tangle yes
  (use-package calfw)
  (use-package calfw-org
    :config
    (require 'calfw-org))
#+end_src

** Org Timeline
#+begin_src emacs-lisp :tangle yes
  (use-package org-timeline
    :config
    (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))
#+end_src

** Pomodoro
#+begin_src emacs-lisp :tangle yes
  ;; Pomodoro
  (use-package org-pomodoro
    :custom-face
    (org-pomodoro-mode-line ((t (:inherit warning))))
    (org-pomodoro-mode-line-overtime ((t (:inherit error))))
    (org-pomodoro-mode-line-break ((t (:inherit success))))
    :bind (:map org-mode-map
                ("C-c C-x m" . org-pomodoro))
    :config
    (with-eval-after-load 'org-agenda
      (bind-keys :map org-agenda-mode-map
                 ("K" . org-pomodoro)
                 ("C-c C-x m" . org-pomodoro))))
#+end_src

** Toc-org
#+begin_src emacs-lisp :tangle yes
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode)
    (add-hook 'markdown-mode-hook 'toc-org-mode))
#+end_src
** Org hugo
#+begin_src emacs-lisp :tangle yes
  (use-package ox-hugo
    :ensure t
    :pin melpa
    :after ox)
#+end_src

** add gfm markdown to Export list
#+begin_src emacs-lisp :tangle yes
  ;;(use-package ox-qmd)
  (use-package ox-gfm)
  (add-to-list 'org-export-backends 'md)
#+end_src

** Org-mind-map
export org to mind-map with Graphviz

1. install Graphviz
   #+begin_src shell :tangle no
     brew install graphviz
   #+end_src

   2. install org-mind-map
   #+begin_src emacs-lisp :tangle yes
     ;; This is an Emacs package that creates graphviz directed graphs from
     ;; the headings of an org file
     (use-package org-mind-map
       :init
       (require 'ox-org)
       :ensure t
       :ensure-system-package (gvgen . graphviz)
       :config
       (setq org-mind-map-engine "dot")       ; Default. Directed Graph
       ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
       ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
       ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
       ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
       ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
       ;; (setq org-mind-map-engine "circo")  ; Circular Layout
       )
   #+end_src

   3. run M-x org-mind-map-write

** Org-roam
https://www.orgroam.com
#+begin_src emacs-lisp :tangle yes
  ;; Roam
  (use-package org-roam
    :diminish
    :hook (after-init . org-roam-db-autosync-enable)
    :bind (("C-c C-n l" . org-roam-buffer-toggle)
           ("C-c C-n f" . org-roam-node-find)
           ("C-c C-n g" . org-roam-graph)
           ("C-c C-n i" . org-roam-node-insert)
           ("C-c C-n c" . org-roam-capture)
           ("C-c C-n j" . org-roam-dailies-capture-today))
    :config
    (setq org-roam-v2-ack t)
    (unless (file-exists-p org-roam-directory)
      (make-directory org-roam-directory)))
#+end_src

** Pandoc
#+begin_src emacs-lisp :tangle yes
  (use-package ox-pandoc
    :ensure-system-package pandoc)
#+end_src

** Org-pdf
如果遇到报错，执行 pdf-tools-install
#+begin_src emacs-lisp :tangle yes
  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freepointer-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

  (use-package org-noter
    :config
    ;; Your org-noter config ........
    (require 'org-noter-pdftools))

#+end_src

** Org download
#+begin_src emacs-lisp :tangle yes
  ;; first install with brew
  ;; brew install pngpaste
  (use-package org-download
    :after org
    :ensure-system-package pngpaste
    :config
    (setq-default org-download-heading-lvl nil)
    (setq-default org-download-image-dir "./images")
    (setq org-download-backend "wget")
    (setq org-download-abbreviate-filename-function (lambda (fn) fn)) ; use original filename
    (defun dummy-org-download-annotate-function (link)
      "")
    (setq org-download-annotate-function
          #'dummy-org-download-annotate-function)
    (org-download-enable))
#+end_src
