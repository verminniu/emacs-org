#+Title:  Vermin's Emacs Configuration

* Emacs Initialization
** Packages Sources

   In order to install packages, it is useful to configure the package sources.

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;;; package -- vermin's emacs conf
   ;;; Code:

   (setq package-archives '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                            ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
                            ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
   #+END_SRC

** use-package

   To be able to manage its configuration with =use-package= it is necessary to
   first install it, if you don't already.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
   #+END_SRC

* Start Up
** Better defaults

   For a better user experience of GNU Emacs, here are the default values I use.

   #+BEGIN_SRC emacs-lisp :tangle yes
	(setq-default
	 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
	 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
	 display-time-default-load-average nil            ; Don't display load average
	 fill-column 100                                   ; Set width for automatic line breaks
	 mode-require-final-newline t                     ; add a newline to end of file
	 help-window-select t                             ; Focus new help windows when opened
	 inhibit-startup-screen t                         ; Disable start-up screen
	 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
	 kill-ring-max 128                                ; Maximum length of kill ring
	 load-prefer-newer t                              ; Prefers the newest version of a file
	 mark-ring-max 128                                ; Maximum length of mark ring
	 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
	 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
	 indent-tabs-mode nil                             ; Space to tab
	 tab-width 4                                      ; Set width for tabs
	 use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
	 user-full-name "Vermin"                          ; Set the full name of the current user
	 user-mail-address "cattlenzq@163.com"            ; Set the email address of the current user
	 vc-follow-symlinks t                             ; Always follow the symlinks
	 make-backup-files nil							  ; close backup files
	 view-read-only t)                                ; Always open read-only buffers in view-mode
  ;  (cd "~/")                                         ; Move to the user directory
	(column-number-mode 1)                            ; Show the column number
    ;;(global-linum-mode 1)
	(display-time-mode 1)                             ; Enable time in the mode-line
	(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
	(global-hl-line-mode)                             ; Hightlight current line
	(prefer-coding-system 'utf-8-unix)		;
    ;;(prefer-coding-system 'chinese-gbk)       ; linux system
	;;(prefer-coding-system 'gb2312-unix)		;
	(show-paren-mode 1)                               ; Show the parent
	(add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))
	(add-to-list 'auto-mode-alist '("\\.inc\\'" . c++-mode))
	(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
   #+END_SRC

** Os Set
   Set OS special config

   use fullcreen on mac os, and use alt instead cmd
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; check OS type
   (cond
     ((string-equal system-type "windows-nt") ; Microsoft Windows
       (progn
         (message "Microsoft Windows")))
     ((string-equal system-type "darwin") ; Mac OS X
       (progn
         (setq mac-command-modifier 'control)
         (setq mac-option-modifier 'meta)
         (add-to-list 'default-frame-alist '(fullscreen . maximized))
         (message "Mac OS X")
         ))
     ((string-equal system-type "gnu/linux") ; linux
       (progn
       (message "Linux"))))
   #+END_SRC

** Customization

   To avoid overloading the GNU Emacs custormization =init.el= file made by the
   user with the UI, I add the generated code in a separate file.

   I also made sure to follow the XDG base directory specification for the
   =auto-save-file= folder, in order to keep my =~/.emacs.d= folder clean.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   auto-save-list-file-name (expand-file-name (format "~/.emacs.d/data/auto-save-list"))
   custom-file (expand-file-name (format "~/.emacs.d/data/custom.el")))
  (when (file-exists-p custom-file)
    (load custom-file t))
   #+END_SRC

** Shell Path
   #+BEGIN_SRC emacs-lisp :tangle yes

   ;; make Emacs use the $PATH set up by the user's shell
   (use-package exec-path-from-shell
     :ensure t
     :init (progn
	   (when(not(eq system-type 'windows-nt))
	     (setq exec-path-from-shell-variables '("PYTHONPATH" "GOPATH"))
	     ;; when it is nil, exec-path-from-shell will read environment variable
	     ;; from .zshenv instead of .zshrc, but makes sure that you put all
	     ;; environment variable you need in .zshenv rather than .zshrc
	     (setq exec-path-from-shell-check-startup-files nil) ;
	     (setq exec-path-from-shell-arguments '("-l" )) ;remove -i read form .zshenv
	    (exec-path-from-shell-initialize)
	    )
	  )
      )

;;   (use-package exec-path-from-shell
;;     :init
;;     (setq exec-path-from-shell-check-startup-files nil)
;;     (exec-path-from-shell-initialize)
;;   )
   #+END_SRC
** Theme

   I'm a big fan of [[https://github.com/arcticicestudio/nord-emacs][nord-theme]] and combined with [[https://github.com/seagle0128/doom-modeline][doom-modeline]], it's just
   happiness.

   *NOTE:* to be able to see icons in the =doom-modeline=, you will need to install
   [[#Icons][all-the-icons]].

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes
    :config
    (load-theme 'doom-dark+ t)
    ;; (load-theme 'doom-Iosvkem t)
    ;; (load-theme 'doom-gruvbox t)
    ;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)

	;; Enable custom neotree theme (all-the-icons must be installed!)
	;;(doom-themes-neotree-config)
	;; or for treemacs users
	(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	(doom-themes-treemacs-config)

	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config)
	)

  (use-package doom-modeline
    :defer 0.1
    :config (doom-modeline-mode))
   #+END_SRC

** FlyCheck
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package flycheck
     :init
	 (global-flycheck-mode)
   )
   #+END_SRC
** Eglot
   Other lsp client
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package eglot
     :ensure t
     :config
     (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
     (add-hook 'c-mode-hook 'eglot-ensure)
     (add-hook 'c++-mode-hook 'eglot-ensure)
     (add-hook 'python-mode-hook 'eglot-ensure)
     (add-hook 'go-mode-hook 'eglot-ensure)
   )
   
   #+END_SRC

** LSP
   #+BEGIN_SRC emacs-lisp :tangle no
 (use-package lsp-mode
     :diminish lsp-mode
     :after yasnippet
     :hook (prog-mode . lsp-deferred)
     :bind (:map lsp-mode-map
            ("C-c C-d" . lsp-describe-thing-at-point))
     :init (setq lsp-auto-guess-root t       ; Detect project root
                 lsp-prefer-flymake nil      ; Use lsp-ui and flycheck
                 flymake-fringe-indicator-position 'right-fringe)
     :config
	 (setq lsp-enable-snippet nil)
	 ;;(setq company-lsp-enable-snippet nil)
     ;; Configure LSP clients
;;     (use-package lsp-clients
;;       :ensure nil
;;       :init
;;       (setq lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
;;;;       (setq lsp-gopls-server-path "/usr/local/gopath//bin/gopls")
;;       )
       )

   (use-package lsp-ui
     :functions my-lsp-ui-imenu-hide-mode-line
     :commands lsp-ui-doc-hide
     :custom-face (lsp-ui-doc-background ((t (:background ,(face-background 'tooltip)))))
     :bind (:map lsp-ui-mode-map
            ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
            ([remap xref-find-references] . lsp-ui-peek-find-references)
            ("C-c u" . lsp-ui-imenu))
     :init (setq lsp-ui-doc-enable t
                 lsp-ui-doc-use-webkit nil
                 lsp-ui-doc-delay 1.0
                 lsp-ui-doc-include-signature t
                 lsp-ui-doc-position 'at-point
                 lsp-ui-doc-border (face-foreground 'default)

                 lsp-ui-sideline-enable nil
                 lsp-ui-sideline-ignore-duplicate t)
     :config
     (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8))

     ;; `C-g'to close doc
     (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

     ;; Reset `lsp-ui-doc-background' after loading theme
     (add-hook 'after-load-theme-hook
               (lambda ()
                 (setq lsp-ui-doc-border (face-foreground 'default))
                 (set-face-background 'lsp-ui-doc-background
                                      (face-background 'tooltip))))

     ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
     ;; @see https://github.com/emacs-lsp/lsp-ui/issues/243
     (defun my-lsp-ui-imenu-hide-mode-line ()
       "Hide the mode-line in lsp-ui-imenu."
       (setq mode-line-format nil))
     (advice-add #'lsp-ui-imenu :after #'my-lsp-ui-imenu-hide-mode-line))

   (use-package company-lsp
     :init (setq company-lsp-cache-candidates 'auto))

   ;; Debug
   (use-package dap-mode
     :diminish
     :functions dap-hydra/nil
     :bind (:map lsp-mode-map
            ("<f5>" . dap-debug)
            ("M-<f5>" . dap-hydra))
     :hook ((after-init . dap-mode)
            (dap-mode . dap-ui-mode)
            (dap-session-created . (lambda (&_rest) (dap-hydra)))
            (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))

            (python-mode . (lambda () (require 'dap-python)))
            (ruby-mode . (lambda () (require 'dap-ruby)))
            (go-mode . (lambda () (require 'dap-go)))
            (java-mode . (lambda () (require 'dap-java)))
            ((c-mode c++-mode objc-mode swift) . (lambda () (require 'dap-lldb)))
            (php-mode . (lambda () (require 'dap-php)))
            (elixir-mode . (lambda () (require 'dap-elixir)))
            ((js-mode js2-mode) . (lambda () (require 'dap-chrome)))))

   ;; `lsp-mode' and `treemacs' integration.
   (use-package lsp-treemacs
     :commands lsp-treemacs-errors-list
   )

   (use-package helm-lsp
     :commands helm-lsp-workspace-symbol
   )
   #+end_SRC
** Turn off mouse interface

   Since I never use the mouse with GNU Emacs, I prefer not to use certain
   graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
   I find invasive.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    (menu-bar-mode -1)              ; Disable the menu bar
    (scroll-bar-mode -1)            ; Disable the scroll bar
    (tool-bar-mode -1)              ; Disable the tool bar
    (tooltip-mode -1))              ; Disable the tooltips
   #+END_SRC

* Languages
** Rainbow Identifiers
   try Rainbow Identifiers
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package rainbow-identifiers
     :config
     (add-hook 'prog-mode-hook 'rainbow-identifiers-mode)
   )
   #+END_SRC

** Doxygen Comment
   Use srecode to genenate doxygen comment
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package srecode
     :config
     (semantic-mode)
     (global-srecode-minor-mode 1)
   )
   #+END_SRC
   
** CMake
   CMake support
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package cmake-mode
     )

   (use-package cmake-font-lock
     :config
     (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
     (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
     )
   #+END_SRC

** Yaml
   Yaml mode support
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package yaml-mode
     :config
     (setq auto-mode-alist  (cons '(".yml$" . yaml-mode) auto-mode-alist))
     )

   (use-package flycheck-yamllint
     :after flycheck
     :init
     (add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup)
   )

   #+END_SRC

** Protobuf
   Proto buf support
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package protobuf-mode
     :config
     (setq auto-mode-alist  (cons '(".proto$" . protobuf-mode) auto-mode-alist))
     )

   #+END_SRC
** Emacs Lisp

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elisp-mode :ensure nil :delight "ξ ")
   #+END_SRC

*** Eldoc

    Provides minibuffer hints when working with Emacs Lisp.

    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eldoc
    :delight
    :hook (emacs-lisp-mode . eldoc-mode))
    #+END_SRC

** Python
   Lsp-mode will start py on python mode
   
   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
   
   #+END_SRC

   #+BEGIN_SRC shell :tangle no
   pip install --upgrade setuptools
   pip install 'python-language-server[all]'
   pip3 install 'python-language-server[all]'
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; Python Mode
   ;; Install:
   ;;   pip install pyflakes
   ;;   pip install autopep8
   ;;   change to python3
   (use-package python
     :ensure nil
	 :defines gud-pdb-command-name pdb-path
	 :config
	 ;; Disable readline based native completion
	 (setq python-shell-completion-native-enable nil)
	 (setq python-indent-offset 4
        python-sort-imports-on-save t
        python-shell-interpreter "python3"
        pippel-python-command "python3"
        importmagic-python-interpreter "python3"
        flycheck-python-pylint-executable "pylint"
        flycheck-python-flake8-executable "flake8")

	 (add-hook 'inferior-python-mode-hook
            (lambda ()
              ;; (bind-key "C-c C-z" #'kill-buffer-and-window inferior-python-mode-map)
              (process-query-on-exit-flag (get-process "Python"))))

	  ;; Live Coding in Python
	  (use-package live-py-mode)

	  ;; Format using YAPF
	  ;; Install: pip install yapf
	  (use-package yapfify
        :diminish yapf-mode
        :hook (python-mode . yapf-mode)))
   #+END_SRC
** C++
   c++ lsp server
   disable cquery and ccls to use clangd as lsp server
   cquery not support new lsp-mode

   =cquery=
   #+BEGIN_SRC emacs-lisp :tangle no
   (with-eval-after-load 'projectile
   (setq projectile-project-root-files-top-down-recurring
        (append '("compile_commands.json"
                  ".cquery")
                projectile-project-root-files-top-down-recurring)))

   (use-package cquery
    :commands lsp
	:hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda ()
	                                                  (require 'cquery)
													  (lsp)
													  ))
    :config
	(setq cquery-executable "cquery")
	(setq cquery-extra-args '("--log-file=~/.cquery/log/cq.log"))
	(setq cquery-cache-dir "~/.cquery/cache")
	(setq cquery-extra-init-params '(:index (:comments 2) :cacheFormat "msgpack" :completion (:detailedLabel t)))
	;;(setq cquery-sem-highlight-method 'overlay)
	(setq cquery-sem-highlight-method 'font-lock)
	(cquery-use-default-rainbow-sem-highlight)
	)
   #+END_SRC

   =ccls=
   #+BEGIN_SRC emacs-lisp :tangle no
   (with-eval-after-load 'projectile
   (setq projectile-project-root-files-top-down-recurring
        (append '("compile_commands.json"
                  ".ccls")
                projectile-project-root-files-top-down-recurring)))

   (use-package ccls
    :commands lsp
	:hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda ()
	                                                  (require 'ccls)
													  (lsp)
													  ))
    :config
	(setq ccls-executable "ccls")
	(setq ccls-extra-args '("--log-file=~/.ccls/log/ccls.log"))
	;;(setq ccls-cache-dir "~/.ccls/cache")
	(setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
	(setq ccls-sem-highlight-method 'font-lock)
	;; alternatively, (setq ccls-sem-highlight-method 'overlay)
	;; For rainbow semantic highlighting
	(ccls-use-default-rainbow-sem-highlight)
	)

   #+END_SRC


   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-c-style				;
	:hook ((c-mode c++-mode) . google-set-c-style)
		   (c-mode-common . google-make-newline-indent))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle yes
  ;; C/C++ Mode -- use google c-style
  (use-package cc-mode
    :ensure nil
	:bind (:map c-mode-base-map
                ("C-c c" . compile))
	;;:hook (c-mode-common . (lambda ()
    ;;            (c-set-style "k&r")
    ;;            (setq tab-width 4)
    ;;            (setq c-basic-offset 4)))
  )
   #+END_SRC

   #+BEGIN_SRC  emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
	:diminish
	:init (modern-c++-font-lock-global-mode t)
  )
   #+END_SRC
** Shell
   Use lsp
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; npm i -g bash-language-server
   #+END_SRC
** Markdown
   Grip use github api Need github account try other
   #+BEGIN_SRC emacs-lisp :tangle no
   ;; try grip-mode
   ;; Grip install:
   ;;      Python
   ;:      pip install grip
   (use-package grip-mode
     :ensure t
     :hook ((markdown-mode org-mode) . grip-mode)
     )

   
   (use-package markdown-mode
     :ensure t
     :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "multimarkdown"))

      #+END_SRC

** GO
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;;; Commentary:
   ;;
   ;; Golang configurations.
   ;;       export GO111MODULE=on
   ;;       export GOPROXY=https://goproxy.cn
   ;;       export GOPATH="/usr/local/gopath/"
   ;;       export PATH="$GOPATH/bin:$PATH"
   ;;       go get golang.org/x/tools/gopls@latest
   ;;
   ;; Go packages:
   ;; go get -u github.com/mdempsky/gocode
   ;; go get -u github.com/rogpeppe/godef
   ;; go get -u golang.org/x/tools/cmd/gopls
   ;; go get -u golang.org/x/tools/cmd/goimports
   ;; go get -u golang.org/x/tools/cmd/gorename
   ;; go get -u golang.org/x/tools/cmd/gotype
   ;; go get -u golang.org/x/tools/cmd/godoc
   ;; go get -u github.com/go-delve/delve/cmd/dlv
   ;; go get -u github.com/josharian/impl
   ;; go get -u github.com/cweill/gotests/...
   ;; go get -u github.com/fatih/gomodifytags
   ;; go get -u github.com/davidrjenni/reftools/cmd/fillstruct
   ;; go get -u github.com/uudashr/gopkgs/cmd/gopkgs
   ;; go get -u onnef.co/go/tools/...
   ;;

 ;; Golang
 (exec-path-from-shell-copy-env "GOPATH")
 (exec-path-from-shell-copy-env "GOROOT")

 ;; Set up before-save hooks to format buffer and add/delete imports.
 ;; Make sure you don't have other gofmt/goimports hooks enabled.
 ;;(defun lsp-go-install-save-hooks ()
 ;; (add-hook 'before-save-hook #'lsp-format-buffer t t)
 ;; (add-hook 'before-save-hook #'lsp-organize-imports t t))
 ;;(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

 ;; (lsp-register-custom-settings
 ;;   '(("gopls.completeUnimported" t t)
 ;;     ("gopls.staticcheck" t t)))

 (use-package go-mode
   :bind (:map go-mode-map
		  ([remap xref-find-definitions] . godef-jump)
		  ("C-c R" . go-remove-unused-imports)
		  ("<f1>" . godoc-at-point))
   :config
   ;; Format with `goimports' if possible, otherwise using `gofmt'
   (when (executable-find "goimports")
	 (setq gofmt-command "goimports"))
   (add-hook 'before-save-hook #'gofmt-before-save)

   (use-package go-projectile)
   (use-package go-dlv)
   (use-package go-fill-struct)
   (use-package go-rename)
   (use-package golint)
   (use-package govet)

;;   (use-package go-gopath
;;     :bind (
;;       :map go-mode-map
;;       ("C-c C-e" . go-gopath-set-gopath)
;;     )
;;   )

   (use-package go-impl
	 :functions (go-packages-gopkgs go-root-and-paths go-packages-fd)
	 :config
	 ;; `go-packages-native', remiplement it.
	 (cond
	  ((executable-find "gopkgs")
	   (defun go-packages-gopkgs()
		 "Return a list of all Go packages, using `gopkgs'."
		 (sort (process-lines "gopkgs") #'string<))
	   (setq go-packages-function #'go-packages-gopkgs))
	  ((executable-find "fd")
	   (defun go-packages-fd ()
		 "Return a list of all installed Go packages, using `fd'."
		 (sort
		  (delete-dups
		   (cl-mapcan
			'(lambda (topdir)
			   (let ((pkgdir (concat topdir "/pkg/")))
				 (--> (shell-command-to-string (concat "fd -e a . " pkgdir))
					  (split-string it "\n")
					  (-map (lambda (str)
							  (--> (string-remove-prefix pkgdir str)
								   (string-trim-left it ".*?/")
								   (string-remove-suffix ".a" it)
								   )
							  ) it))))
			(go-root-and-paths)))
		  #'string<))
	   (setq go-packages-function #'go-packages-fd))))

   (use-package go-tag
	 :bind (:map go-mode-map
			("C-c t" . go-tag-add)
			("C-c T" . go-tag-remove))
	 :config (setq go-tag-args (list "-transform" "camelcase")))

   (use-package go-gen-test
	 :bind (:map go-mode-map
			("C-c C-t" . go-gen-test-dwim)))

   (use-package gotest
	 :bind (:map go-mode-map
			("C-c a" . go-test-current-project)
			("C-c m" . go-test-current-file)
			("C-c ." . go-test-current-test)
			("C-c x" . go-run))))

 ;; Local Golang playground for short snippets
 (use-package go-playground
  :diminish
  :commands go-playground-mode)

   #+END_SRC
* Advanced Configuration
** Icons
   To integrate icons with =doom-modeline=, =switch-to-buffer=, =counsel-find-file=
   and many other functions; [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] is just the best package that you can
   find.

   *NOTE:* if it's the first time that you install the package, you must run
   =M-x all-the-icons-install-fonts=.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons
  )

  (use-package all-the-icons-dired
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  )

   #+END_SRC

** Dashboard

   Always good to have a dashboard.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :config
	(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
	(setq dashboard-set-heading-icons t)
	(setq dashboard-set-file-icons t)
	(dashboard-setup-startup-hook)
	)
   #+END_SRC

** Dired

   For those who didn't know, GNU Emacs is also a file explorer.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired
    :ensure nil
    :delight "Dired "
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alh")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))
   #+END_SRC

** Company
   =company= provides auto-completion at point and to Displays a small pop-in
   containing the candidates.

   #+BEGIN_QUOTE
   Company is a text completion framework for Emacs. The name stands for "complete
   anything". It uses pluggable back-ends and front-ends to retrieve and display
   completion candidates.

   [[http://company-mode.github.io/][Dmitry Gutov]]
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :defer 0.5
    :delight
	:init
	(add-hook 'after-init-hook 'global-company-mode)
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-dabbrev-ignore-case t)
    (company-minimum-prefix-length 1)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t)
    :config
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
;;	(delete 'company-dabbrev 'company-backends)
;;	(add-to-list 'company-backends #'company-dabbrev)
	(setq company-dabbrev-char-regexp "[\\.0-9a-zA-Z-_'/]")
	(setq company-dabbrev-code-other-buffers 'all)
  )



   #+END_SRC

   I use =company= with =company-box= that allows a company front-end with icons.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-box
    :after company
    :delight
    :hook (company-mode . company-box-mode))
   #+END_SRC

** Buffers

   Buffers can quickly become a mess. For some people, it's not a problem, but I
   like being able to find my way easily.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))
   #+END_SRC

** History

   Provides the ability to have commands and their history saved so that whenever
   you return to work, you can re-run things as you need them. This is not a
   radical function, it is part of a good user experience.
   
   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length t)
    (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (savehist-file (expand-file-name (format "~/.emacs.d/cache/history")))
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
   #+END_SRC

** Which-Key
   Use Whick-key to help
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package which-key
     :init
     (which-key-mode)
   )
   #+END_SRC
** Ivy

   I used =helm= before, but I find =ivy= faster and lighter.

   #+BEGIN_QUOTE
   Ivy is a generic completion mechanism for Emacs. While it operates similarly to
   other completion schemes such as icomplete-mode, Ivy aims to be more efficient,
   smaller, simpler, and smoother to use yet highly customizable.

   [[https://github.com/abo-abo/ivy][Oleh Krehel]]
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package counsel
    :after ivy
    :delight
    :bind (
	       ("C-x C-d" . counsel-dired-jump)
           ("C-x C-h" . counsel-minibuffer-history)
           ("C-x C-l" . counsel-find-library)
           ("C-x C-r" . counsel-recentf)
           ("C-x C-u" . counsel-unicode-char)
           ("C-x C-v" . counsel-set-variable)
           ("C-c n" . counsel-imenu)
		   ("M-x" . counsel-M-x)
		   )
    :config (counsel-mode)
    :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s"))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode)
  )

  (use-package ivy
    :delight
    :defer 0.1
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("M-H"   . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-i" . ivy-partial-or-done)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-switch-buffer-kill))
    :custom
    (ivy-case-fold-search-default t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package ivy-pass
    :after ivy
    :commands ivy-pass)

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config (ivy-rich-mode 1))

  (use-package all-the-icons-ivy
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))
   #+END_SRC
** Parentheses

   Managing parentheses can be painful. One of the first things you want to do is
   to change the appearance of the highlight of the parentheses pairs.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#262b36")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))
   #+END_SRC

*** =rainbow-delimiters=

    #+BEGIN_QUOTE
    rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
    delimiters such as parentheses, brackets or braces according to their
    depth. Each successive level is highlighted in a different color. This makes it
    easy to spot matching delimiters, orient yourself in the code, and tell which
    statements are at a given depth.

    [[https://github.com/Fanael/rainbow-delimiters][Fanael Linithien]]
    #+END_QUOTE

    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
    #+END_SRC

*** =smartparens=

    In my opinion, it is the most powerful package to deal with the
    parenthesis. Anyway, if you don't like it, you can try taking a look at
    =paredit= or =autopair=.

    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :defer 1
    :delight
    :custom (sp-escape-quotes-after-insert nil)
    :config (smartparens-global-mode 1))
    #+END_SRC

** Projectile

   #+BEGIN_QUOTE
   Projectile is a project interaction library for Emacs. Its goal is to provide a
   nice set of features operating on a project level without introducing external
   dependencies (when feasible). For instance - finding project files has a
   portable implementation written in pure Emacs Lisp without the use of GNU find
   (but for performance sake an indexing mechanism backed by external commands
   exists as well).

   [[https://github.com/bbatsov/projectile][Bozhidar Batsov]]
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    ;;:defer 1
    :custom
    (projectile-cache-file (expand-file-name (format "~/.emacs.d/cache/projectile.cache")))
    (projectile-globally-ignored-file-suffixes '(".o" ".a"))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    ;;(projectile-keymap-prefix (kbd "C-c p"))
    (projectile-require-project nil)
    (projectile-known-projects-file (expand-file-name (format "~/.emacs.d/cache/projectile-bookmarks.eld")))
    (projectile-mode-line '(:eval (projectile-project-name)))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (add-to-list 'projectile-globally-ignored-directories ".clangd")
    (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
    (projectile-global-mode)
	)

  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))
   #+END_SRC

** Recent Files

   Provides fast access to the recent files.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package recentf
    :bind ("C-c r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "COMMIT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name (format "~/.emacs.d/cache/recentf")))
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
   #+END_SRC

** Version Control

   It is quite common to work on Git repositories, so it is important to have a
   configuration that we like.

   #+BEGIN_QUOTE
   [[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
   package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
   claim that Magit wraps and improves upon each and every Git command, it is
   complete enough to allow even experienced Git users to perform almost all of
   their daily version control tasks directly from within Emacs. While many fine
   Git clients exist, only Magit and Git itself deserve to be called porcelains.

   [[https://github.com/tarsius][Jonas Bernoulli]]
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-commit
    :after magit
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50)
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil)))

  (use-package magit :defer 0.3)

   (use-package hl-todo
     :init
	 (add-hook 'after-init-hook 'global-hl-todo-mode)
   )

   (use-package magit-todos
   )

   #+END_SRC

   In addition to that, I like to see the lines that are being modified in the file
   while it is being edited.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter
    :defer 0.3
    :delight
    :init (global-git-gutter-mode +1))
   #+END_SRC

   Finally, one last package that I like to use with Git to easily see the changes
   made by previous commits.

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine
    :defer 1
    :delight)
   #+END_SRC

** Whitespaces

   It is often annoying to see unnecessary blank spaces at the end of a line or
   file. Let's get ride of them:

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package whitespace-cleanup-mode
     :hook (prog-mode . whitespace-cleanup-mode)
   )

   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
  (use-package simple
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
   #+END_SRC
** Word Wrap

   I like to have lines of the same length.

   #+BEGIN_SRC emacs-lisp :tangle no
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :bind ("C-x p" . pop-to-mark-command)
    :hook ((prog-mode . turn-on-auto-fill)
           (text-mode . turn-on-auto-fill))
    :custom (set-mark-command-repeat-pop t))
   #+END_SRC

** YASnippet

   #+BEGIN_QUOTE
   YASnippet is a template system for Emacs. It allows you to type an abbreviation
   and automatically expand it into function templates.
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :defer t
	:init
	;;(add-hook 'prog-mode-hook 'yas-minor-mode)
    (yas-global-mode 1)
    )

  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package auto-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)
   #+END_SRC
** Number Window
   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package window-numbering			;
	:init
	(window-numbering-mode 1)
	:config
	(setq window-numbering-assign-func
		(lambda () (when (equal (buffer-name) "*Calculator*") 9)))
  )
   #+END_SRC
** Whole line or region
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package whole-line-or-region
     :init
	 (whole-line-or-region-global-mode)
   )
   #+END_SRC

** Ediff
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package ediff
     :config
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
     (setq ediff-split-window-function 'split-window-horizontally)

     (defun update-diff-colors ()
     "update the colors for diff faces"
     (set-face-attribute 'diff-added nil
                      :foreground "white" :background "blue")
     (set-face-attribute 'diff-removed nil
                      :foreground "white" :background "red3")
     (set-face-attribute 'diff-changed nil
                      :foreground "white" :background "purple"))

     (eval-after-load "diff-mode"
       '(update-diff-colors))

     ;; Usage: emacs -diff file1 file2
     (defun command-line-diff (switch)
      (let ((file1 (pop command-line-args-left))
            (file2 (pop command-line-args-left)))
        (ediff file1 file2)))

    (add-to-list 'command-switch-alist '("diff" . command-line-diff))

    ;; turn off whitespace checking:
    (setq ediff-diff-options "-w")
    )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package diff-hl
     :init
     (global-diff-hl-mode)
   )

   (use-package diffview)
   #+END_SRC

   Use ztree to diff dirs
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package ztree)
   #+END_SRC

** Vdiff
   Use vdiff
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package vdiff
     :config
     (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
   )

   (use-package vdiff-magit
     :config
     (define-key magit-mode-map "e" 'vdiff-magit-dwim)
     (define-key magit-mode-map "E" 'vdiff-magit)
     (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
     (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
     (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
     (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)
   )
   #+END_SRC

** Symbol overlay
   hight light symbol in different color
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package symbol-overlay
     :bind (("M-i" . symbol-overlay-put)
	        ("M-n" . symbol-overlay-jump-next)
			("M-p" . symbol-overlay-jump-prev)
	       )
   )
   #+END_SRC
** Smex
   #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package smex
         :init
         (smex-initialize)
     ;;    :bind (("M-x" . smex)
     ;;	       ("M-X" . smex-major-mode-commands)
     ;;		   ("C-c C-c M-x" . execute-extended-command)
     ;;	      )
       )

   #+END_SRC
** Compile
   Use smart compile
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package smart-compile
     )
   #+END_SRC

   try Quickrun
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package quickrun
   ;; :config
   ;; ;; Use this parameter in pod-mode
   ;; (quickrun-add-command "c++/build"
   ;;   '((:command . "build.sh")
   ;;     (:default-directory . 'topdir)
   ;;     (:exec    . "./%c"))
   ;;    :mode 'c++-mode)
   )

   (defun git-build ()
     " for git project compile to use ./build.sh "
     (interactive)
     (let* ((cmd "git rev-parse --show-toplevel")
          (topdir (with-temp-buffer
                    (call-process-shell-command cmd nil t nil)
                    (goto-char (point-min))
                    (if (re-search-forward "^\\(.+\\)$" nil t)
                        (match-string 1)))))
     (quickrun :source `((:command . "build.sh")
                         (:default-directory . ,topdir)
                         (:exec . ("./%c"))
                         (:timeout . 1000)))))


 ;;(quickrun-set-default "c" "c++/build")
 ;;(quickrun-set-default "c++" "c++/build")
   #+END_SRC
** Refactor
   Try emr
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package emr
       :config
       (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)
     )
   #+END_SRC
** Add mutil iedit
   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package iedit
    :bind (("C-c ;" . iedit-mode)
    )
  )
   #+END_SRC

** Treemacs

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)
  
      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)
  
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
  
  ;;;; disable evil
  ;;(use-package treemacs-evil
  ;;  :after treemacs evil
  ;;  :ensure t)
  
  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)
  
  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))
  
  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
  
  (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
    :after treemacs persp-mode ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

   #+END_SRC

* Org-mode
